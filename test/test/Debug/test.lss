
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  000002aa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000563  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000223  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000390  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000181  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dd  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerSet>:
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
  96:	80 93 61 00 	sts	0x0061, r24
  9a:	90 93 62 00 	sts	0x0062, r25
  9e:	a0 93 63 00 	sts	0x0063, r26
  a2:	b0 93 64 00 	sts	0x0064, r27
	_avr_timer_cntcurr = _avr_timer_M;
  a6:	80 93 66 00 	sts	0x0066, r24
  aa:	90 93 67 00 	sts	0x0067, r25
  ae:	a0 93 68 00 	sts	0x0068, r26
  b2:	b0 93 69 00 	sts	0x0069, r27
}
  b6:	08 95       	ret

000000b8 <TimerSetMS>:

void TimerSetMS(unsigned long M)
{
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
	TimerSet(TICKS_PER_MS * M);
  bc:	ac 01       	movw	r20, r24
  be:	bd 01       	movw	r22, r26
  c0:	44 0f       	add	r20, r20
  c2:	55 1f       	adc	r21, r21
  c4:	66 1f       	adc	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	66 1f       	adc	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	84 0f       	add	r24, r20
  d2:	95 1f       	adc	r25, r21
  d4:	a6 1f       	adc	r26, r22
  d6:	b7 1f       	adc	r27, r23
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 49 00 	call	0x92	; 0x92 <TimerSet>
}
  e0:	08 95       	ret

000000e2 <TimerOn>:

void TimerOn() {
	extern const unsigned char prescaler;
	// AVR timer/counter controller register TCCR0
	TCCR0 	= 0x08 | prescaler;	// bit3bit6=10: CTC mode (clear timer on compare)
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	83 bf       	out	0x33, r24	; 51
					//
					//each interrupt uses ~20 clock cycles.
					//	This adds ~20 * (1024/64 = 16) = 320 cycles per interrupt.

	// AVR output compare register OCR0.
	OCR0 	= INTS_PER_MS/TICKS_PER_MS;//125 // Timer interrupt will be generated when TCNT0==OCR0
  e6:	89 e1       	ldi	r24, 0x19	; 25
  e8:	8c bf       	out	0x3c, r24	; 60
					// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
					// So when TCNT0 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

	TIMSK 	= 0x02; // bit1: OCIE0 -- enables compare match interrupt
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0 = 0;
  ee:	12 be       	out	0x32, r1	; 50

	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
  f0:	80 91 61 00 	lds	r24, 0x0061
  f4:	90 91 62 00 	lds	r25, 0x0062
  f8:	a0 91 63 00 	lds	r26, 0x0063
  fc:	b0 91 64 00 	lds	r27, 0x0064
 100:	80 93 66 00 	sts	0x0066, r24
 104:	90 93 67 00 	sts	0x0067, r25
 108:	a0 93 68 00 	sts	0x0068, r26
 10c:	b0 93 69 00 	sts	0x0069, r27

	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 110:	8f b7       	in	r24, 0x3f	; 63
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8f bf       	out	0x3f, r24	; 63
}
 116:	08 95       	ret

00000118 <TimerOff>:

void TimerOff() {
	TCCR0 	= 0x00; // bit2bit1bit0=000: timer off
 118:	13 be       	out	0x33, r1	; 51
}
 11a:	08 95       	ret

0000011c <__vector_10>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
//unsigned long pass = 0, per = 0;
ISR(TIMER0_COMP_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
#ifndef SLAVE
	--_avr_timer_cntcurr; 			// Count down to 0 rather than up to TOP
 12e:	80 91 66 00 	lds	r24, 0x0066
 132:	90 91 67 00 	lds	r25, 0x0067
 136:	a0 91 68 00 	lds	r26, 0x0068
 13a:	b0 91 69 00 	lds	r27, 0x0069
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	a1 09       	sbc	r26, r1
 142:	b1 09       	sbc	r27, r1
 144:	80 93 66 00 	sts	0x0066, r24
 148:	90 93 67 00 	sts	0x0067, r25
 14c:	a0 93 68 00 	sts	0x0068, r26
 150:	b0 93 69 00 	sts	0x0069, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	a1 05       	cpc	r26, r1
 158:	b1 05       	cpc	r27, r1
 15a:	99 f4       	brne	.+38     	; 0x182 <__vector_10+0x66>

inline void TimerISR() {
	/*if(TimerFlag)
	PORTB ^= 1;
	else*/
	TimerFlag = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 6a 00 	sts	0x006A, r24
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
#ifndef SLAVE
	--_avr_timer_cntcurr; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 162:	80 91 61 00 	lds	r24, 0x0061
 166:	90 91 62 00 	lds	r25, 0x0062
 16a:	a0 91 63 00 	lds	r26, 0x0063
 16e:	b0 91 64 00 	lds	r27, 0x0064
 172:	80 93 66 00 	sts	0x0066, r24
 176:	90 93 67 00 	sts	0x0067, r25
 17a:	a0 93 68 00 	sts	0x0068, r26
 17e:	b0 93 69 00 	sts	0x0069, r27
	}
#else
	TimerISR();
#endif
}
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <main>:
#include <ucr/timer.h>

const unsigned char prescaler = PRESCALER_64;

int main(void)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	0f 92       	push	r0
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	
	unsigned short i;
	unsigned short j;
	unsigned short time_to_off = 0;
	
	SFIOR = (1 << PUD) | (1 << ACME); //Pull-up disable, Analog Converter Multiplexer enable
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	80 bf       	out	0x30, r24	; 48
	DDRA = 0xFF; PORTA = 0x00;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	8a bb       	out	0x1a, r24	; 26
 1a6:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xFF; PORTB = 0x00;
 1a8:	87 bb       	out	0x17, r24	; 23
 1aa:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xFF; PORTC = 0x00;
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF; PORTD = 0x00; //LED Anodes low
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	12 ba       	out	0x12, r1	; 18
	
	//init Analog-to-digital conversion
	ADMUX = (1 << REFS0);// | (1 << ADLAR);
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //enable, prescalar 64. 8,000,000 / 64 = 125,000
 1b8:	86 b1       	in	r24, 0x06	; 6
 1ba:	87 68       	ori	r24, 0x87	; 135
 1bc:	86 b9       	out	0x06, r24	; 6
	
	unsigned char max = 0, min = 0xFF, val = 0;
	volatile unsigned char garbage = 0;
 1be:	19 82       	std	Y+1, r1	; 0x01
	
	//start
	while(1)
	{
		DDRA = 0xFF;
 1c0:	1f ef       	ldi	r17, 0xFF	; 255
		PORTB = 2;
 1c2:	f2 e0       	ldi	r31, 0x02	; 2
		PORTA = 2 | 0b11111100; //light, uncharge
 1c4:	ee ef       	ldi	r30, 0xFE	; 254
		PORTA = 0 | 0b11111100; //unlight
 1c6:	7c ef       	ldi	r23, 0xFC	; 252
		DDRA = ~2;
 1c8:	6d ef       	ldi	r22, 0xFD	; 253
		//PORTB = 0;
		//j = ADCL;
		//garbage = ADCH;
		
		
		PORTD = 1;
 1ca:	51 e0       	ldi	r21, 0x01	; 1
		PORTC = ~(ADC >> 2);//0xFF;//j;//( 0xFF >> ( 8 - ( (255-j)) >> 1) );//~(j>>8);
		//DDRA = 0xFF;
		//PORTA = ~(j);
		
		//PORTC = ~(ADC > 512);
		PORTD = 0x80;
 1cc:	40 e8       	ldi	r20, 0x80	; 128
 1ce:	24 e6       	ldi	r18, 0x64	; 100
 1d0:	30 e0       	ldi	r19, 0x00	; 0
	volatile unsigned char garbage = 0;
	
	//start
	while(1)
	{
		DDRA = 0xFF;
 1d2:	1a bb       	out	0x1a, r17	; 26
		PORTB = 2;
 1d4:	f8 bb       	out	0x18, r31	; 24
		PORTA = 2 | 0b11111100; //light, uncharge
 1d6:	eb bb       	out	0x1b, r30	; 27
		PORTA = 0 | 0b11111100; //unlight
 1d8:	7b bb       	out	0x1b, r23	; 27
		DDRA = ~2;
 1da:	6a bb       	out	0x1a, r22	; 26
		
		ADMUX |= 1;
 1dc:	38 9a       	sbi	0x07, 0	; 7
		ADCSRA |= 1 << ADSC; // start analog read
 1de:	36 9a       	sbi	0x06, 6	; 6
		
		//224
		//141
		while(!(ADCSRA & (1<<ADIF))); //poll until ready
 1e0:	34 9b       	sbis	0x06, 4	; 6
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x4c>
		//PORTB = 0;
		//j = ADCL;
		//garbage = ADCH;
		
		
		PORTD = 1;
 1e4:	52 bb       	out	0x12, r21	; 18
		PORTC = ~(ADC >> 2);//0xFF;//j;//( 0xFF >> ( 8 - ( (255-j)) >> 1) );//~(j>>8);
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	80 95       	com	r24
 1f4:	85 bb       	out	0x15, r24	; 21
		//DDRA = 0xFF;
		//PORTA = ~(j);
		
		//PORTC = ~(ADC > 512);
		PORTD = 0x80;
 1f6:	42 bb       	out	0x12, r20	; 18
 1f8:	c9 01       	movw	r24, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	af ec       	ldi	r26, 0xCF	; 207
 1fc:	b7 e0       	ldi	r27, 0x07	; 7
 1fe:	11 97       	sbiw	r26, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x6a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x70>
 204:	00 00       	nop
 206:	01 97       	sbiw	r24, 0x01	; 1
		
		for(i = 0; i < 100; ++i)
 208:	c1 f7       	brne	.-16     	; 0x1fa <main+0x66>
 20a:	e3 cf       	rjmp	.-58     	; 0x1d2 <main+0x3e>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
