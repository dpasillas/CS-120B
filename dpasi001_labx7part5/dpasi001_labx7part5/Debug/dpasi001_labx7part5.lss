
dpasi001_labx7part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800074  00800074  00000434  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a4  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ae  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f1  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000162  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000149  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 01 	call	0x340	; 0x340 <main>
  8a:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerOn>:
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
	// AVR timer/counter controller register TCCR0
	TCCR0 = 0x0B;	// bit3bit6=10: CTC mode (clear timer on compare)
  92:	8b e0       	ldi	r24, 0x0B	; 11
  94:	83 bf       	out	0x33, r24	; 51
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT0 register will count at 125,000 ticks/s

	// AVR output compare register OCR0.
	OCR0 = 125;	// Timer interrupt will be generated when TCNT0==OCR0
  96:	8d e7       	ldi	r24, 0x7D	; 125
  98:	8c bf       	out	0x3c, r24	; 60
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT0 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK = 0x02; // bit1: OCIE0 -- enables compare match interrupt
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0=0;
  9e:	12 be       	out	0x32, r1	; 50

	_avr_timer_cntcurr = _avr_timer_M;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	a0 91 62 00 	lds	r26, 0x0062
  ac:	b0 91 63 00 	lds	r27, 0x0063
  b0:	80 93 74 00 	sts	0x0074, r24
  b4:	90 93 75 00 	sts	0x0075, r25
  b8:	a0 93 76 00 	sts	0x0076, r26
  bc:	b0 93 77 00 	sts	0x0077, r27
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
}
  c6:	08 95       	ret

000000c8 <TimerOff>:

void TimerOff() {
	TCCR0 = 0x00; // bit2bit1bit0=000: timer off
  c8:	13 be       	out	0x33, r1	; 51
}
  ca:	08 95       	ret

000000cc <TimerISR>:

void TimerISR() {
	TimerFlag = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 78 00 	sts	0x0078, r24
}
  d2:	08 95       	ret

000000d4 <__vector_10>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect) {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
  f6:	80 91 74 00 	lds	r24, 0x0074
  fa:	90 91 75 00 	lds	r25, 0x0075
  fe:	a0 91 76 00 	lds	r26, 0x0076
 102:	b0 91 77 00 	lds	r27, 0x0077
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	a1 09       	sbc	r26, r1
 10a:	b1 09       	sbc	r27, r1
 10c:	80 93 74 00 	sts	0x0074, r24
 110:	90 93 75 00 	sts	0x0075, r25
 114:	a0 93 76 00 	sts	0x0076, r26
 118:	b0 93 77 00 	sts	0x0077, r27
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	a1 05       	cpc	r26, r1
 120:	b1 05       	cpc	r27, r1
 122:	91 f4       	brne	.+36     	; 0x148 <__vector_10+0x74>
	TimerISR(); // Call the ISR that the user uses
 124:	0e 94 66 00 	call	0xcc	; 0xcc <TimerISR>
	_avr_timer_cntcurr = _avr_timer_M;
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	90 91 61 00 	lds	r25, 0x0061
 130:	a0 91 62 00 	lds	r26, 0x0062
 134:	b0 91 63 00 	lds	r27, 0x0063
 138:	80 93 74 00 	sts	0x0074, r24
 13c:	90 93 75 00 	sts	0x0075, r25
 140:	a0 93 76 00 	sts	0x0076, r26
 144:	b0 93 77 00 	sts	0x0077, r27
}
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
 16e:	80 93 60 00 	sts	0x0060, r24
 172:	90 93 61 00 	sts	0x0061, r25
 176:	a0 93 62 00 	sts	0x0062, r26
 17a:	b0 93 63 00 	sts	0x0063, r27
	_avr_timer_cntcurr = _avr_timer_M;
 17e:	80 93 74 00 	sts	0x0074, r24
 182:	90 93 75 00 	sts	0x0075, r25
 186:	a0 93 76 00 	sts	0x0076, r26
 18a:	b0 93 77 00 	sts	0x0077, r27
}
 18e:	08 95       	ret

00000190 <Write7Seg>:
	0x77, 0x4C, //0111 0111, 0100 1100, //6, 7
	0x7F, 0x6F, //0111 1111, 0111 1111, //8, 9
	0x5F, 0x73, //0101 1111, 0111 0011, //A, B
	0x36, 0x79, //0111 0110, 0111 1001, //C, D
0x37, 0x17};//0011 0111, 0001 0111};//E, F
PORTC = ~Seg7[x%16];
 190:	e8 2f       	mov	r30, r24
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ef 70       	andi	r30, 0x0F	; 15
 196:	f0 70       	andi	r31, 0x00	; 0
 198:	ec 59       	subi	r30, 0x9C	; 156
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	80 95       	com	r24
 1a0:	85 bb       	out	0x15, r24	; 21
}
 1a2:	08 95       	ret

000001a4 <SM_Tick>:
unsigned char val, tick, wait;
	
SM_Tick(unsigned char input)
{
	//transitions
	switch(state)
 1a4:	90 91 7a 00 	lds	r25, 0x007A
 1a8:	91 30       	cpi	r25, 0x01	; 1
 1aa:	e9 f0       	breq	.+58     	; 0x1e6 <SM_Tick+0x42>
 1ac:	91 30       	cpi	r25, 0x01	; 1
 1ae:	20 f0       	brcs	.+8      	; 0x1b8 <SM_Tick+0x14>
 1b0:	92 30       	cpi	r25, 0x02	; 2
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <SM_Tick+0x12>
 1b4:	4d c0       	rjmp	.+154    	; 0x250 <SM_Tick+0xac>
 1b6:	30 c0       	rjmp	.+96     	; 0x218 <SM_Tick+0x74>
	case INIT:
	    state = WAITING;
		break;
	case WAITING:
	    //state = UP;
		switch(input)
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	49 f0       	breq	.+18     	; 0x1ce <SM_Tick+0x2a>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	08 f4       	brcc	.+2      	; 0x1c2 <SM_Tick+0x1e>
 1c0:	57 c0       	rjmp	.+174    	; 0x270 <SM_Tick+0xcc>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	41 f0       	breq	.+16     	; 0x1d6 <SM_Tick+0x32>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	09 f0       	breq	.+2      	; 0x1cc <SM_Tick+0x28>
 1ca:	47 c0       	rjmp	.+142    	; 0x25a <SM_Tick+0xb6>
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <SM_Tick+0x3a>
		{
	    case 0: state = WAITING; break;
		case 1: state = UP; break;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 7a 00 	sts	0x007A, r24
 1d4:	53 c0       	rjmp	.+166    	; 0x27c <SM_Tick+0xd8>
		case 2: state = DOWN; break;
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 7a 00 	sts	0x007A, r24
 1dc:	64 c0       	rjmp	.+200    	; 0x2a6 <SM_Tick+0x102>
		case 3: state = BOTH; break;
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	80 93 7a 00 	sts	0x007A, r24
 1e4:	75 c0       	rjmp	.+234    	; 0x2d0 <SM_Tick+0x12c>
		default: break;
		}
		break;
	case UP:
	    switch(input)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <SM_Tick+0x48>
 1ea:	48 c0       	rjmp	.+144    	; 0x27c <SM_Tick+0xd8>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <SM_Tick+0x56>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	31 f0       	breq	.+12     	; 0x200 <SM_Tick+0x5c>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	89 f5       	brne	.+98     	; 0x25a <SM_Tick+0xb6>
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <SM_Tick+0x68>
	    {
		    case 0: state = WAITING; break;
 1fa:	10 92 7a 00 	sts	0x007A, r1
 1fe:	38 c0       	rjmp	.+112    	; 0x270 <SM_Tick+0xcc>
		    case 1: state = UP; break;
		    case 2: state = DOWN; tick = 0; break;
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	80 93 7a 00 	sts	0x007A, r24
 206:	10 92 7e 00 	sts	0x007E, r1
 20a:	27 c0       	rjmp	.+78     	; 0x25a <SM_Tick+0xb6>
		    case 3: state = BOTH; tick = 0; break;
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	80 93 7a 00 	sts	0x007A, r24
 212:	10 92 7e 00 	sts	0x007E, r1
 216:	21 c0       	rjmp	.+66     	; 0x25a <SM_Tick+0xb6>
		    default: break;
	    }
		break;
	case DOWN:
	    switch(input)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	51 f0       	breq	.+20     	; 0x230 <SM_Tick+0x8c>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	28 f0       	brcs	.+10     	; 0x22a <SM_Tick+0x86>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	61 f0       	breq	.+24     	; 0x23c <SM_Tick+0x98>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	c9 f4       	brne	.+50     	; 0x25a <SM_Tick+0xb6>
 228:	0d c0       	rjmp	.+26     	; 0x244 <SM_Tick+0xa0>
	    {
		    case 0: state = WAITING; break;
 22a:	10 92 7a 00 	sts	0x007A, r1
 22e:	20 c0       	rjmp	.+64     	; 0x270 <SM_Tick+0xcc>
		    case 1: state = UP; tick = 0; break;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 7a 00 	sts	0x007A, r24
 236:	10 92 7e 00 	sts	0x007E, r1
 23a:	0f c0       	rjmp	.+30     	; 0x25a <SM_Tick+0xb6>
		    case 2: state = DOWN; break;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 7a 00 	sts	0x007A, r24
 242:	31 c0       	rjmp	.+98     	; 0x2a6 <SM_Tick+0x102>
		    case 3: state = BOTH; tick = 0; break;
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	80 93 7a 00 	sts	0x007A, r24
 24a:	10 92 7e 00 	sts	0x007E, r1
 24e:	05 c0       	rjmp	.+10     	; 0x25a <SM_Tick+0xb6>
		    default: break;
	    }
		break;
	default:
	    if(input == 0)
 250:	88 23       	and	r24, r24
 252:	19 f4       	brne	.+6      	; 0x25a <SM_Tick+0xb6>
		    state = WAITING;
 254:	10 92 7a 00 	sts	0x007A, r1
 258:	0b c0       	rjmp	.+22     	; 0x270 <SM_Tick+0xcc>
	}
	
	//
	switch(state)
 25a:	80 91 7a 00 	lds	r24, 0x007A
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	69 f0       	breq	.+26     	; 0x27c <SM_Tick+0xd8>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	28 f0       	brcs	.+10     	; 0x270 <SM_Tick+0xcc>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	f1 f0       	breq	.+60     	; 0x2a6 <SM_Tick+0x102>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	99 f5       	brne	.+102    	; 0x2d4 <SM_Tick+0x130>
 26e:	30 c0       	rjmp	.+96     	; 0x2d0 <SM_Tick+0x12c>
	{
	case WAITING:
	    //val = 0;
		tick = 50;
 270:	82 e3       	ldi	r24, 0x32	; 50
 272:	80 93 7e 00 	sts	0x007E, r24
		wait = 50;
 276:	80 93 7d 00 	sts	0x007D, r24
		break;
 27a:	2c c0       	rjmp	.+88     	; 0x2d4 <SM_Tick+0x130>
	case UP:
	    if(tick >= wait && val < 9)
 27c:	90 91 7e 00 	lds	r25, 0x007E
 280:	80 91 7d 00 	lds	r24, 0x007D
 284:	98 17       	cp	r25, r24
 286:	48 f0       	brcs	.+18     	; 0x29a <SM_Tick+0xf6>
 288:	80 91 7c 00 	lds	r24, 0x007C
 28c:	89 30       	cpi	r24, 0x09	; 9
 28e:	28 f4       	brcc	.+10     	; 0x29a <SM_Tick+0xf6>
		{
		    ++val; tick = 0;
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 7c 00 	sts	0x007C, r24
 296:	10 92 7e 00 	sts	0x007E, r1
		}
		tick++;
 29a:	80 91 7e 00 	lds	r24, 0x007E
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 7e 00 	sts	0x007E, r24
		break;
 2a4:	17 c0       	rjmp	.+46     	; 0x2d4 <SM_Tick+0x130>
	case DOWN:
	    if(tick >= wait && val > 0)
 2a6:	90 91 7e 00 	lds	r25, 0x007E
 2aa:	80 91 7d 00 	lds	r24, 0x007D
 2ae:	98 17       	cp	r25, r24
 2b0:	48 f0       	brcs	.+18     	; 0x2c4 <SM_Tick+0x120>
 2b2:	80 91 7c 00 	lds	r24, 0x007C
 2b6:	88 23       	and	r24, r24
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <SM_Tick+0x120>
	    {
		    --val; tick = 0;
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	80 93 7c 00 	sts	0x007C, r24
 2c0:	10 92 7e 00 	sts	0x007E, r1
	    }
	    tick++;
 2c4:	80 91 7e 00 	lds	r24, 0x007E
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	80 93 7e 00 	sts	0x007E, r24
		break;
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <SM_Tick+0x130>
	case BOTH:
	    val = 0;
 2d0:	10 92 7c 00 	sts	0x007C, r1
    default:
	    break; //this line should never be reached!
	}
	
	Write7Seg(val);
 2d4:	80 91 7c 00 	lds	r24, 0x007C
 2d8:	0e 94 c8 00 	call	0x190	; 0x190 <Write7Seg>
}
 2dc:	08 95       	ret

000002de <D_TICK>:

enum {D_WAITING, D_PUSHED} d_state;
unsigned char d_tick;
void D_TICK()
{
	unsigned char input = ~PINA & 0x03;
 2de:	89 b3       	in	r24, 0x19	; 25
 2e0:	80 95       	com	r24
 2e2:	98 2f       	mov	r25, r24
 2e4:	93 70       	andi	r25, 0x03	; 3
	switch(d_state)
 2e6:	80 91 79 00 	lds	r24, 0x0079
 2ea:	88 23       	and	r24, r24
 2ec:	19 f0       	breq	.+6      	; 0x2f4 <D_TICK+0x16>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	79 f4       	brne	.+30     	; 0x310 <D_TICK+0x32>
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <D_TICK+0x24>
	{
		case INIT: d_state = D_WAITING; break;
		case D_WAITING: d_state = (input)?D_PUSHED:D_WAITING; break;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	99 23       	and	r25, r25
 2f8:	09 f4       	brne	.+2      	; 0x2fc <D_TICK+0x1e>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	80 93 79 00 	sts	0x0079, r24
 300:	0a c0       	rjmp	.+20     	; 0x316 <D_TICK+0x38>
		case D_PUSHED: d_state = (input)?D_PUSHED:D_WAITING; break;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	99 23       	and	r25, r25
 306:	09 f4       	brne	.+2      	; 0x30a <D_TICK+0x2c>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	80 93 79 00 	sts	0x0079, r24
 30e:	03 c0       	rjmp	.+6      	; 0x316 <D_TICK+0x38>
		default: d_state = D_WAITING;
 310:	10 92 79 00 	sts	0x0079, r1
 314:	07 c0       	rjmp	.+14     	; 0x324 <D_TICK+0x46>
	}
	
	switch(d_state)
 316:	80 91 79 00 	lds	r24, 0x0079
 31a:	88 23       	and	r24, r24
 31c:	19 f0       	breq	.+6      	; 0x324 <D_TICK+0x46>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	71 f4       	brne	.+28     	; 0x33e <D_TICK+0x60>
 322:	03 c0       	rjmp	.+6      	; 0x32a <D_TICK+0x4c>
	{
		case D_WAITING: d_tick = 0; break;
 324:	10 92 7b 00 	sts	0x007B, r1
 328:	08 95       	ret
		case D_PUSHED: ++d_tick;
 32a:	80 91 7b 00 	lds	r24, 0x007B
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 7b 00 	sts	0x007B, r24
			if(d_tick == 150)
 334:	86 39       	cpi	r24, 0x96	; 150
 336:	19 f4       	brne	.+6      	; 0x33e <D_TICK+0x60>
			    wait = 20; //20ms * 20 ==  400 ms
 338:	84 e1       	ldi	r24, 0x14	; 20
 33a:	80 93 7d 00 	sts	0x007D, r24
 33e:	08 95       	ret

00000340 <main>:
		default: break;
	}
}
void main()
{
	DDRA = 0x00; PORTA = 0xFF;
 340:	1a ba       	out	0x1a, r1	; 26
 342:	cf ef       	ldi	r28, 0xFF	; 255
 344:	cb bb       	out	0x1b, r28	; 27
	DDRB = 0xFF; // Set port B to output
 346:	c7 bb       	out	0x17, r28	; 23
	PORTB = 0x00; // Init port B to 0s
 348:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xFF; PORTC = 0x00;
 34a:	c4 bb       	out	0x14, r28	; 20
 34c:	15 ba       	out	0x15, r1	; 21
	TimerSet(20);
 34e:	64 e1       	ldi	r22, 0x14	; 20
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 b5 00 	call	0x16a	; 0x16a <TimerSet>
	TimerOn();
 35a:	0e 94 49 00 	call	0x92	; 0x92 <TimerOn>
	unsigned char B = 0x00;
	
	state = INIT;
 35e:	c0 93 7a 00 	sts	0x007A, r28
	d_state = INIT;
 362:	c0 93 79 00 	sts	0x0079, r28
	Write7Seg(0);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 c8 00 	call	0x190	; 0x190 <Write7Seg>
	while(1) {
		// User code
		SM_Tick(~PINA & 0x03);
 36c:	89 b3       	in	r24, 0x19	; 25
 36e:	80 95       	com	r24
 370:	83 70       	andi	r24, 0x03	; 3
 372:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SM_Tick>
		D_TICK();
 376:	0e 94 6f 01 	call	0x2de	; 0x2de <D_TICK>
		//Write7Seg(7);
		//PORTB = ~PORTB;	// Toggle PORTB; Temporary, bad programming style
		while (!TimerFlag);	// Wait 1 sec
 37a:	80 91 78 00 	lds	r24, 0x0078
 37e:	88 23       	and	r24, r24
 380:	e1 f3       	breq	.-8      	; 0x37a <main+0x3a>
		TimerFlag = 0;
 382:	10 92 78 00 	sts	0x0078, r1
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 386:	f2 cf       	rjmp	.-28     	; 0x36c <main+0x2c>

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
