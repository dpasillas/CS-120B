
dpasi001_final_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000260  00800060  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008002c0  008002c0  00000758  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006aa  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000212  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000167  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3f       	cpi	r26, 0xFB	; 251
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  8a:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerSet>:
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
  96:	80 93 bb 02 	sts	0x02BB, r24
  9a:	90 93 bc 02 	sts	0x02BC, r25
  9e:	a0 93 bd 02 	sts	0x02BD, r26
  a2:	b0 93 be 02 	sts	0x02BE, r27
	_avr_timer_cntcurr = _avr_timer_M;
  a6:	80 93 c0 02 	sts	0x02C0, r24
  aa:	90 93 c1 02 	sts	0x02C1, r25
  ae:	a0 93 c2 02 	sts	0x02C2, r26
  b2:	b0 93 c3 02 	sts	0x02C3, r27
}
  b6:	08 95       	ret

000000b8 <TimerSetMS>:

void TimerSetMS(unsigned long M)
{
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
	TimerSet(TICKS_PER_MS * M);
  bc:	ac 01       	movw	r20, r24
  be:	bd 01       	movw	r22, r26
  c0:	44 0f       	add	r20, r20
  c2:	55 1f       	adc	r21, r21
  c4:	66 1f       	adc	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	66 1f       	adc	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	84 0f       	add	r24, r20
  d2:	95 1f       	adc	r25, r21
  d4:	a6 1f       	adc	r26, r22
  d6:	b7 1f       	adc	r27, r23
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 49 00 	call	0x92	; 0x92 <TimerSet>
}
  e0:	08 95       	ret

000000e2 <TimerOn>:

void TimerOn() {
	extern const unsigned char prescaler;
	// AVR timer/counter controller register TCCR0
	TCCR0 	= 0x08 | prescaler;	// bit3bit6=10: CTC mode (clear timer on compare)
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	83 bf       	out	0x33, r24	; 51
					//
					//each interrupt uses ~20 clock cycles.
					//	This adds ~20 * (1024/64 = 16) = 320 cycles per interrupt.

	// AVR output compare register OCR0.
	OCR0 	= INTS_PER_MS/TICKS_PER_MS;//125 / TICKS_PER_MS;	// Timer interrupt will be generated when TCNT0==OCR0
  e6:	89 e1       	ldi	r24, 0x19	; 25
  e8:	8c bf       	out	0x3c, r24	; 60
					// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
					// So when TCNT0 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

	TIMSK 	= 0x02; // bit1: OCIE0 -- enables compare match interrupt
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0 = 0;
  ee:	12 be       	out	0x32, r1	; 50

	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
  f0:	80 91 bb 02 	lds	r24, 0x02BB
  f4:	90 91 bc 02 	lds	r25, 0x02BC
  f8:	a0 91 bd 02 	lds	r26, 0x02BD
  fc:	b0 91 be 02 	lds	r27, 0x02BE
 100:	80 93 c0 02 	sts	0x02C0, r24
 104:	90 93 c1 02 	sts	0x02C1, r25
 108:	a0 93 c2 02 	sts	0x02C2, r26
 10c:	b0 93 c3 02 	sts	0x02C3, r27

	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 110:	8f b7       	in	r24, 0x3f	; 63
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8f bf       	out	0x3f, r24	; 63
}
 116:	08 95       	ret

00000118 <TimerOff>:

void TimerOff() {
	TCCR0 	= 0x00; // bit2bit1bit0=000: timer off
 118:	13 be       	out	0x33, r1	; 51
}
 11a:	08 95       	ret

0000011c <__vector_10>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
//unsigned long pass = 0, per = 0;
ISR(TIMER0_COMP_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	--_avr_timer_cntcurr; 			// Count down to 0 rather than up to TOP
 12e:	80 91 c0 02 	lds	r24, 0x02C0
 132:	90 91 c1 02 	lds	r25, 0x02C1
 136:	a0 91 c2 02 	lds	r26, 0x02C2
 13a:	b0 91 c3 02 	lds	r27, 0x02C3
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	a1 09       	sbc	r26, r1
 142:	b1 09       	sbc	r27, r1
 144:	80 93 c0 02 	sts	0x02C0, r24
 148:	90 93 c1 02 	sts	0x02C1, r25
 14c:	a0 93 c2 02 	sts	0x02C2, r26
 150:	b0 93 c3 02 	sts	0x02C3, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	a1 05       	cpc	r26, r1
 158:	b1 05       	cpc	r27, r1
 15a:	99 f4       	brne	.+38     	; 0x182 <__vector_10+0x66>
void TimerOff() {
	TCCR0 	= 0x00; // bit2bit1bit0=000: timer off
}

inline void TimerISR() {
	TimerFlag = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 c4 02 	sts	0x02C4, r24
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	--_avr_timer_cntcurr; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 162:	80 91 bb 02 	lds	r24, 0x02BB
 166:	90 91 bc 02 	lds	r25, 0x02BC
 16a:	a0 91 bd 02 	lds	r26, 0x02BD
 16e:	b0 91 be 02 	lds	r27, 0x02BE
 172:	80 93 c0 02 	sts	0x02C0, r24
 176:	90 93 c1 02 	sts	0x02C1, r25
 17a:	a0 93 c2 02 	sts	0x02C2, r26
 17e:	b0 93 c3 02 	sts	0x02C3, r27
	}
}
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <initSongs>:

static unsigned char temp, i = 0;
#define S_INIT(song,KEY,DUR)(temp = i++, song[temp].note_per = k[(KEY == REST)?K_REST:(K_##KEY + song##_OFFSET)], song[temp].duration = DUR)

void initSongs()
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
S_INIT(cf,FSH_4, N_4), //crazy frog
 198:	80 91 c5 02 	lds	r24, 0x02C5
 19c:	e8 2f       	mov	r30, r24
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	27 ec       	ldi	r18, 0xC7	; 199
 1a2:	32 e0       	ldi	r19, 0x02	; 2
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	4d e0       	ldi	r20, 0x0D	; 13
 1ae:	40 83       	st	Z, r20
 1b0:	96 e0       	ldi	r25, 0x06	; 6
 1b2:	91 83       	std	Z+1, r25	; 0x01
 1b4:	e8 2f       	mov	r30, r24
 1b6:	ef 5f       	subi	r30, 0xFF	; 255
S_INIT(cf,REST, N_4),
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	bf ef       	ldi	r27, 0xFF	; 255
 1c4:	b0 83       	st	Z, r27
 1c6:	91 83       	std	Z+1, r25	; 0x01
 1c8:	e8 2f       	mov	r30, r24
 1ca:	ee 5f       	subi	r30, 0xFE	; 254
S_INIT(cf,A_4, N_4_5),
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e2 0f       	add	r30, r18
 1d4:	f3 1f       	adc	r31, r19
 1d6:	ab e0       	ldi	r26, 0x0B	; 11
 1d8:	a0 83       	st	Z, r26
 1da:	59 e0       	ldi	r21, 0x09	; 9
 1dc:	51 83       	std	Z+1, r21	; 0x01
 1de:	e8 2f       	mov	r30, r24
 1e0:	ed 5f       	subi	r30, 0xFD	; 253
S_INIT(cf,FSH_4, N_4),
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e2 0f       	add	r30, r18
 1ea:	f3 1f       	adc	r31, r19
 1ec:	40 83       	st	Z, r20
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	e8 2f       	mov	r30, r24
 1f2:	ec 5f       	subi	r30, 0xFC	; 252
S_INIT(cf,FSH_4, N_8),
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e2 0f       	add	r30, r18
 1fc:	f3 1f       	adc	r31, r19
 1fe:	40 83       	st	Z, r20
 200:	63 e0       	ldi	r22, 0x03	; 3
 202:	61 83       	std	Z+1, r22	; 0x01
 204:	e8 2f       	mov	r30, r24
 206:	eb 5f       	subi	r30, 0xFB	; 251
S_INIT(cf,B_4, N_4),
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	e2 0f       	add	r30, r18
 210:	f3 1f       	adc	r31, r19
 212:	7a e0       	ldi	r23, 0x0A	; 10
 214:	70 83       	st	Z, r23
 216:	91 83       	std	Z+1, r25	; 0x01
 218:	e8 2f       	mov	r30, r24
 21a:	ea 5f       	subi	r30, 0xFA	; 250
S_INIT(cf,FSH_4, N_4),
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	e2 0f       	add	r30, r18
 224:	f3 1f       	adc	r31, r19
 226:	40 83       	st	Z, r20
 228:	91 83       	std	Z+1, r25	; 0x01
 22a:	e8 2f       	mov	r30, r24
 22c:	e9 5f       	subi	r30, 0xF9	; 249
S_INIT(cf,E_4, N_4),
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	e2 0f       	add	r30, r18
 236:	f3 1f       	adc	r31, r19
 238:	7f e0       	ldi	r23, 0x0F	; 15
 23a:	70 83       	st	Z, r23
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	e8 2f       	mov	r30, r24
 240:	e8 5f       	subi	r30, 0xF8	; 248
S_INIT(cf,FSH_4, N_4),
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e2 0f       	add	r30, r18
 24a:	f3 1f       	adc	r31, r19
 24c:	40 83       	st	Z, r20
 24e:	91 83       	std	Z+1, r25	; 0x01
 250:	e8 2f       	mov	r30, r24
 252:	e7 5f       	subi	r30, 0xF7	; 247
S_INIT(cf,REST, N_4),
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	b0 83       	st	Z, r27
 260:	91 83       	std	Z+1, r25	; 0x01
 262:	e8 2f       	mov	r30, r24
 264:	e6 5f       	subi	r30, 0xF6	; 246
S_INIT(cf,CSH_5, N_4_5),
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	e2 0f       	add	r30, r18
 26e:	f3 1f       	adc	r31, r19
 270:	50 83       	st	Z, r21
 272:	51 83       	std	Z+1, r21	; 0x01
 274:	e8 2f       	mov	r30, r24
 276:	e5 5f       	subi	r30, 0xF5	; 245
S_INIT(cf,FSH_4, N_4),
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e2 0f       	add	r30, r18
 280:	f3 1f       	adc	r31, r19
 282:	40 83       	st	Z, r20
 284:	91 83       	std	Z+1, r25	; 0x01
 286:	e8 2f       	mov	r30, r24
 288:	e4 5f       	subi	r30, 0xF4	; 244
S_INIT(cf,FSH_4, N_8),
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	e2 0f       	add	r30, r18
 292:	f3 1f       	adc	r31, r19
 294:	40 83       	st	Z, r20
 296:	61 83       	std	Z+1, r22	; 0x01
 298:	e8 2f       	mov	r30, r24
 29a:	e3 5f       	subi	r30, 0xF3	; 243
S_INIT(cf,D_5, N_4),
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	e2 0f       	add	r30, r18
 2a4:	f3 1f       	adc	r31, r19
 2a6:	c8 e0       	ldi	r28, 0x08	; 8
 2a8:	c0 83       	st	Z, r28
 2aa:	91 83       	std	Z+1, r25	; 0x01
 2ac:	e8 2f       	mov	r30, r24
 2ae:	e2 5f       	subi	r30, 0xF2	; 242
S_INIT(cf,CSH_5, N_4),
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	e2 0f       	add	r30, r18
 2b8:	f3 1f       	adc	r31, r19
 2ba:	50 83       	st	Z, r21
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	e8 2f       	mov	r30, r24
 2c0:	e1 5f       	subi	r30, 0xF1	; 241
S_INIT(cf,A_4, N_4),
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	e2 0f       	add	r30, r18
 2ca:	f3 1f       	adc	r31, r19
 2cc:	a0 83       	st	Z, r26
 2ce:	91 83       	std	Z+1, r25	; 0x01
 2d0:	e8 2f       	mov	r30, r24
 2d2:	e0 5f       	subi	r30, 0xF0	; 240
S_INIT(cf,FSH_4, N_4),
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	40 83       	st	Z, r20
 2e0:	91 83       	std	Z+1, r25	; 0x01
 2e2:	e8 2f       	mov	r30, r24
 2e4:	ef 5e       	subi	r30, 0xEF	; 239
S_INIT(cf,CSH_5, N_4),
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e2 0f       	add	r30, r18
 2ee:	f3 1f       	adc	r31, r19
 2f0:	50 83       	st	Z, r21
 2f2:	91 83       	std	Z+1, r25	; 0x01
 2f4:	e8 2f       	mov	r30, r24
 2f6:	ee 5e       	subi	r30, 0xEE	; 238
S_INIT(cf,FSH_5, N_4),
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	e2 0f       	add	r30, r18
 300:	f3 1f       	adc	r31, r19
 302:	90 83       	st	Z, r25
 304:	91 83       	std	Z+1, r25	; 0x01
 306:	e8 2f       	mov	r30, r24
 308:	ed 5e       	subi	r30, 0xED	; 237
S_INIT(cf,FSH_4, N_8),
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e2 0f       	add	r30, r18
 312:	f3 1f       	adc	r31, r19
 314:	40 83       	st	Z, r20
 316:	61 83       	std	Z+1, r22	; 0x01
 318:	e8 2f       	mov	r30, r24
 31a:	ec 5e       	subi	r30, 0xEC	; 236
S_INIT(cf,E_4, N_4),
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	e2 0f       	add	r30, r18
 324:	f3 1f       	adc	r31, r19
 326:	70 83       	st	Z, r23
 328:	91 83       	std	Z+1, r25	; 0x01
 32a:	e8 2f       	mov	r30, r24
 32c:	eb 5e       	subi	r30, 0xEB	; 235
S_INIT(cf,E_4, N_8),
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	e2 0f       	add	r30, r18
 336:	f3 1f       	adc	r31, r19
 338:	70 83       	st	Z, r23
 33a:	61 83       	std	Z+1, r22	; 0x01
 33c:	e8 2f       	mov	r30, r24
 33e:	ea 5e       	subi	r30, 0xEA	; 234
S_INIT(cf,CSH_4, N_4),
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	52 e1       	ldi	r21, 0x12	; 18
 34c:	50 83       	st	Z, r21
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	e8 2f       	mov	r30, r24
 352:	e9 5e       	subi	r30, 0xE9	; 233
S_INIT(cf,GSH_4, N_4),
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e2 0f       	add	r30, r18
 35c:	f3 1f       	adc	r31, r19
 35e:	5c e0       	ldi	r21, 0x0C	; 12
 360:	50 83       	st	Z, r21
 362:	91 83       	std	Z+1, r25	; 0x01
S_INIT(cf,FSH_4, N_2*3),
 364:	e8 2f       	mov	r30, r24
 366:	e7 5e       	subi	r30, 0xE7	; 231
S_INIT(cf,FSH_5, N_4),
S_INIT(cf,FSH_4, N_8),
S_INIT(cf,E_4, N_4),
S_INIT(cf,E_4, N_8),
S_INIT(cf,CSH_4, N_4),
S_INIT(cf,GSH_4, N_4),
 368:	c8 2f       	mov	r28, r24
 36a:	c8 5e       	subi	r28, 0xE8	; 232
S_INIT(cf,FSH_4, N_2*3),
 36c:	d0 e0       	ldi	r29, 0x00	; 0
 36e:	cc 0f       	add	r28, r28
 370:	dd 1f       	adc	r29, r29
 372:	c2 0f       	add	r28, r18
 374:	d3 1f       	adc	r29, r19
 376:	48 83       	st	Y, r20
 378:	98 e4       	ldi	r25, 0x48	; 72
 37a:	99 83       	std	Y+1, r25	; 0x01
S_INIT(cf,REST, N_2_5);
 37c:	e0 93 c6 02 	sts	0x02C6, r30
 380:	86 5e       	subi	r24, 0xE6	; 230
 382:	80 93 c5 02 	sts	0x02C5, r24
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	e2 0f       	add	r30, r18
 38e:	f3 1f       	adc	r31, r19
 390:	b0 83       	st	Z, r27
 392:	8e e1       	ldi	r24, 0x1E	; 30
 394:	81 83       	std	Z+1, r24	; 0x01
cf[21].note_per = E_4,	cf[21].duration = N_8,
cf[22].note_per = CSH_4,cf[22].duration = N_4,
cf[23].note_per = GSH_4,cf[23].duration = N_4,
cf[24].note_per = FSH_4,cf[24].duration = N_2*3,
cf[25].note_per = REST,	cf[25].duration = N_2_5;*/
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <main>:
const unsigned char prescaler = PRESCALER_64;
#include <ucr/tone.h>

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00; //output
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	8a bb       	out	0x1a, r24	; 26
 3a0:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xFF; PORTB = 0x00;
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00; PORTC = 0xFF;
 3a6:	14 ba       	out	0x14, r1	; 20
 3a8:	85 bb       	out	0x15, r24	; 21
	
	TimerSet(1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 49 00 	call	0x92	; 0x92 <TimerSet>
	TimerOn();
 3b6:	0e 94 71 00 	call	0xe2	; 0xe2 <TimerOn>
	
	unsigned long tick = 0;
 3ba:	cc 24       	eor	r12, r12
 3bc:	dd 24       	eor	r13, r13
 3be:	76 01       	movw	r14, r12
    while(1)
    {
		if(PINC)
		{
			if(++tick % k[PINC] == 0)
 3c0:	c8 e0       	ldi	r28, 0x08	; 8
 3c2:	d2 e0       	ldi	r29, 0x02	; 2
				tick = 0, PORTA ^= 1;
 3c4:	11 e0       	ldi	r17, 0x01	; 1
 3c6:	88 24       	eor	r8, r8
 3c8:	99 24       	eor	r9, r9
 3ca:	54 01       	movw	r10, r8
	TimerOn();
	
	unsigned long tick = 0;
    while(1)
    {
		if(PINC)
 3cc:	83 b3       	in	r24, 0x13	; 19
 3ce:	88 23       	and	r24, r24
 3d0:	f1 f0       	breq	.+60     	; 0x40e <main+0x72>
		{
			if(++tick % k[PINC] == 0)
 3d2:	08 94       	sec
 3d4:	c1 1c       	adc	r12, r1
 3d6:	d1 1c       	adc	r13, r1
 3d8:	e1 1c       	adc	r14, r1
 3da:	f1 1c       	adc	r15, r1
 3dc:	e3 b3       	in	r30, 0x13	; 19
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	ec 0f       	add	r30, r28
 3e6:	fd 1f       	adc	r31, r29
 3e8:	20 81       	ld	r18, Z
 3ea:	31 81       	ldd	r19, Z+1	; 0x01
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	0e 94 0e 02 	call	0x41c	; 0x41c <__udivmodsi4>
 3f8:	dc 01       	movw	r26, r24
 3fa:	cb 01       	movw	r24, r22
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	a1 05       	cpc	r26, r1
 400:	b1 05       	cpc	r27, r1
 402:	29 f4       	brne	.+10     	; 0x40e <main+0x72>
				tick = 0, PORTA ^= 1;
 404:	8b b3       	in	r24, 0x1b	; 27
 406:	81 27       	eor	r24, r17
 408:	8b bb       	out	0x1b, r24	; 27
 40a:	75 01       	movw	r14, r10
 40c:	64 01       	movw	r12, r8
		}
		while(!TimerFlag){}
 40e:	80 91 c4 02 	lds	r24, 0x02C4
 412:	88 23       	and	r24, r24
 414:	e1 f3       	breq	.-8      	; 0x40e <main+0x72>
		TimerFlag = 0;
 416:	10 92 c4 02 	sts	0x02C4, r1
        //TODO:: Please write your application code 
    }
 41a:	d8 cf       	rjmp	.-80     	; 0x3cc <main+0x30>

0000041c <__udivmodsi4>:
 41c:	a1 e2       	ldi	r26, 0x21	; 33
 41e:	1a 2e       	mov	r1, r26
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	fd 01       	movw	r30, r26
 426:	0d c0       	rjmp	.+26     	; 0x442 <__udivmodsi4_ep>

00000428 <__udivmodsi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	ee 1f       	adc	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	a2 17       	cp	r26, r18
 432:	b3 07       	cpc	r27, r19
 434:	e4 07       	cpc	r30, r20
 436:	f5 07       	cpc	r31, r21
 438:	20 f0       	brcs	.+8      	; 0x442 <__udivmodsi4_ep>
 43a:	a2 1b       	sub	r26, r18
 43c:	b3 0b       	sbc	r27, r19
 43e:	e4 0b       	sbc	r30, r20
 440:	f5 0b       	sbc	r31, r21

00000442 <__udivmodsi4_ep>:
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	1a 94       	dec	r1
 44c:	69 f7       	brne	.-38     	; 0x428 <__udivmodsi4_loop>
 44e:	60 95       	com	r22
 450:	70 95       	com	r23
 452:	80 95       	com	r24
 454:	90 95       	com	r25
 456:	9b 01       	movw	r18, r22
 458:	ac 01       	movw	r20, r24
 45a:	bd 01       	movw	r22, r26
 45c:	cf 01       	movw	r24, r30
 45e:	08 95       	ret

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
