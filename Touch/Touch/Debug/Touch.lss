
Touch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029b  00800066  00800066  000006ee  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000e48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ca  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e1  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026b  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000531  00000000  00000000  000022d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 30       	cpi	r26, 0x01	; 1
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
  8a:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerSet>:
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
  96:	80 93 61 00 	sts	0x0061, r24
  9a:	90 93 62 00 	sts	0x0062, r25
  9e:	a0 93 63 00 	sts	0x0063, r26
  a2:	b0 93 64 00 	sts	0x0064, r27
	_avr_timer_cntcurr = _avr_timer_M;
  a6:	80 93 e6 02 	sts	0x02E6, r24
  aa:	90 93 e7 02 	sts	0x02E7, r25
  ae:	a0 93 e8 02 	sts	0x02E8, r26
  b2:	b0 93 e9 02 	sts	0x02E9, r27
}
  b6:	08 95       	ret

000000b8 <TimerSetMS>:

void TimerSetMS(unsigned long M)
{
  b8:	dc 01       	movw	r26, r24
  ba:	cb 01       	movw	r24, r22
	TimerSet(TICKS_PER_MS * M);
  bc:	ac 01       	movw	r20, r24
  be:	bd 01       	movw	r22, r26
  c0:	44 0f       	add	r20, r20
  c2:	55 1f       	adc	r21, r21
  c4:	66 1f       	adc	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	66 1f       	adc	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	84 0f       	add	r24, r20
  d2:	95 1f       	adc	r25, r21
  d4:	a6 1f       	adc	r26, r22
  d6:	b7 1f       	adc	r27, r23
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 49 00 	call	0x92	; 0x92 <TimerSet>
}
  e0:	08 95       	ret

000000e2 <TimerOn>:

void TimerOn() {
	extern const unsigned char prescaler;
	// AVR timer/counter controller register TCCR0
	TCCR0 	= 0x08 | prescaler;	// bit3bit6=10: CTC mode (clear timer on compare)
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	83 bf       	out	0x33, r24	; 51
					//
					//each interrupt uses ~20 clock cycles.
					//	This adds ~20 * (1024/64 = 16) = 320 cycles per interrupt.

	// AVR output compare register OCR0.
	OCR0 	= INTS_PER_MS/TICKS_PER_MS;//125 // Timer interrupt will be generated when TCNT0==OCR0
  e6:	89 e1       	ldi	r24, 0x19	; 25
  e8:	8c bf       	out	0x3c, r24	; 60
					// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
					// So when TCNT0 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

	TIMSK 	= 0x02; // bit1: OCIE0 -- enables compare match interrupt
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0 = 0;
  ee:	12 be       	out	0x32, r1	; 50

	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
  f0:	80 91 61 00 	lds	r24, 0x0061
  f4:	90 91 62 00 	lds	r25, 0x0062
  f8:	a0 91 63 00 	lds	r26, 0x0063
  fc:	b0 91 64 00 	lds	r27, 0x0064
 100:	80 93 e6 02 	sts	0x02E6, r24
 104:	90 93 e7 02 	sts	0x02E7, r25
 108:	a0 93 e8 02 	sts	0x02E8, r26
 10c:	b0 93 e9 02 	sts	0x02E9, r27

	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 110:	8f b7       	in	r24, 0x3f	; 63
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8f bf       	out	0x3f, r24	; 63
}
 116:	08 95       	ret

00000118 <TimerOff>:

void TimerOff() {
	TCCR0 	= 0x00; // bit2bit1bit0=000: timer off
 118:	13 be       	out	0x33, r1	; 51
}
 11a:	08 95       	ret

0000011c <__vector_10>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
//unsigned long pass = 0, per = 0;
ISR(TIMER0_COMP_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
#ifndef SLAVE
	--_avr_timer_cntcurr; 			// Count down to 0 rather than up to TOP
 12e:	80 91 e6 02 	lds	r24, 0x02E6
 132:	90 91 e7 02 	lds	r25, 0x02E7
 136:	a0 91 e8 02 	lds	r26, 0x02E8
 13a:	b0 91 e9 02 	lds	r27, 0x02E9
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	a1 09       	sbc	r26, r1
 142:	b1 09       	sbc	r27, r1
 144:	80 93 e6 02 	sts	0x02E6, r24
 148:	90 93 e7 02 	sts	0x02E7, r25
 14c:	a0 93 e8 02 	sts	0x02E8, r26
 150:	b0 93 e9 02 	sts	0x02E9, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	a1 05       	cpc	r26, r1
 158:	b1 05       	cpc	r27, r1
 15a:	99 f4       	brne	.+38     	; 0x182 <__vector_10+0x66>

inline void TimerISR() {
	/*if(TimerFlag)
	PORTB ^= 1;
	else*/
	TimerFlag = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 ea 02 	sts	0x02EA, r24
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
#ifndef SLAVE
	--_avr_timer_cntcurr; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 162:	80 91 61 00 	lds	r24, 0x0061
 166:	90 91 62 00 	lds	r25, 0x0062
 16a:	a0 91 63 00 	lds	r26, 0x0063
 16e:	b0 91 64 00 	lds	r27, 0x0064
 172:	80 93 e6 02 	sts	0x02E6, r24
 176:	90 93 e7 02 	sts	0x02E7, r25
 17a:	a0 93 e8 02 	sts	0x02E8, r26
 17e:	b0 93 e9 02 	sts	0x02E9, r27
	}
#else
	TimerISR();
#endif
}
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <SPI_Setup>:
}

void SPI_Setup()
{
	/* Set MOSI and SCK output, all others input */
	DDRB = 0xFF;//(1<<5)|(1<<7);
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	/* Enable SPI, Master, 2x clock rate, Data order*/
	SPCR = (1<<SPE) | (1<<MSTR) | (1 << SPI2X) /*|(1<<SPR0)*/ /*| (1 << DORD)*/;
 198:	81 e5       	ldi	r24, 0x51	; 81
 19a:	8d b9       	out	0x0d, r24	; 13
}
 19c:	08 95       	ret

0000019e <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 19e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 1a0:	77 9b       	sbis	0x0e, 7	; 14
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <SPI_MasterTransmit+0x2>
}
 1a4:	08 95       	ret

000001a6 <LED_MatrixTransmit>:

void LED_MatrixTransmit(uchar r, uchar g, uchar b, uchar com)
{
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	c8 2f       	mov	r28, r24
 1ae:	16 2f       	mov	r17, r22
 1b0:	d4 2f       	mov	r29, r20
 1b2:	82 2f       	mov	r24, r18
	PORTB &= ~2; //Master Reset on
 1b4:	c1 98       	cbi	0x18, 1	; 24
	PORTB |= 2;
 1b6:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= 1;  //MR off, Latch on
 1b8:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~1;  //Latch off
 1ba:	c0 98       	cbi	0x18, 0	; 24
	SPI_MasterTransmit(com);
 1bc:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_MasterTransmit>
	SPI_MasterTransmit(~g);
 1c0:	81 2f       	mov	r24, r17
 1c2:	80 95       	com	r24
 1c4:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_MasterTransmit>
	SPI_MasterTransmit(~b);
 1c8:	8d 2f       	mov	r24, r29
 1ca:	80 95       	com	r24
 1cc:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_MasterTransmit>
	PORTA = ~r;
 1d0:	c0 95       	com	r28
 1d2:	cb bb       	out	0x1b, r28	; 27
	PORTB |= 1;
 1d4:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~1;
 1d6:	c0 98       	cbi	0x18, 0	; 24
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <LED_Display>:
	//DDRA |= chan;
	return ADC;
}

uchar LED_Display(uchar state)
{
 1e0:	9f 92       	push	r9
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
	PORTA = 0xFF;
 1f6:	9f ef       	ldi	r25, 0xFF	; 255
 1f8:	9b bb       	out	0x1b, r25	; 27
	DDRA = 0xFF;
 1fa:	9a bb       	out	0x1a, r25	; 26
	state = (state + 1) & 0b00111111;
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	0f 2e       	mov	r0, r31
 200:	ff e3       	ldi	r31, 0x3F	; 63
 202:	9f 2e       	mov	r9, r31
 204:	f0 2d       	mov	r31, r0
 206:	98 22       	and	r9, r24
	uchar row = state & 0b0111;
 208:	0f 2e       	mov	r0, r31
 20a:	f7 e0       	ldi	r31, 0x07	; 7
 20c:	af 2e       	mov	r10, r31
 20e:	f0 2d       	mov	r31, r0
 210:	a8 22       	and	r10, r24
	uchar col;
	uchar cmask;
	for(col = 0; col < 8; ++col)
	{
		cmask >>= 1;
		cmask |= ((diff[1][row][col] + diff[2][row][col] + diff[3][row][col] + diff[4][row][col]) > 8) << 7;
 212:	4a 2d       	mov	r20, r10
 214:	50 e0       	ldi	r21, 0x00	; 0
	while(!(ADCSRA & (1<<ADIF))); //poll until ready
	//DDRA |= chan;
	return ADC;
}

uchar LED_Display(uchar state)
 216:	da 01       	movw	r26, r20
 218:	a2 95       	swap	r26
 21a:	b2 95       	swap	r27
 21c:	b0 7f       	andi	r27, 0xF0	; 240
 21e:	ba 27       	eor	r27, r26
 220:	a0 7f       	andi	r26, 0xF0	; 240
 222:	ba 27       	eor	r27, r26
 224:	aa 51       	subi	r26, 0x1A	; 26
 226:	bf 4f       	sbci	r27, 0xFF	; 255
 228:	ca 01       	movw	r24, r20
 22a:	82 95       	swap	r24
 22c:	92 95       	swap	r25
 22e:	90 7f       	andi	r25, 0xF0	; 240
 230:	98 27       	eor	r25, r24
 232:	80 7f       	andi	r24, 0xF0	; 240
 234:	98 27       	eor	r25, r24
 236:	0f 2e       	mov	r0, r31
 238:	f6 e6       	ldi	r31, 0x66	; 102
 23a:	ef 2e       	mov	r14, r31
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	ff 2e       	mov	r15, r31
 240:	f0 2d       	mov	r31, r0
 242:	e8 0e       	add	r14, r24
 244:	f9 1e       	adc	r15, r25
 246:	ca 01       	movw	r24, r20
 248:	82 95       	swap	r24
 24a:	92 95       	swap	r25
 24c:	90 7f       	andi	r25, 0xF0	; 240
 24e:	98 27       	eor	r25, r24
 250:	80 7f       	andi	r24, 0xF0	; 240
 252:	98 27       	eor	r25, r24
 254:	8c 01       	movw	r16, r24
 256:	0a 51       	subi	r16, 0x1A	; 26
 258:	1e 4f       	sbci	r17, 0xFE	; 254
 25a:	ca 01       	movw	r24, r20
 25c:	82 95       	swap	r24
 25e:	92 95       	swap	r25
 260:	90 7f       	andi	r25, 0xF0	; 240
 262:	98 27       	eor	r25, r24
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	98 27       	eor	r25, r24
 268:	ec 01       	movw	r28, r24
 26a:	ca 59       	subi	r28, 0x9A	; 154
 26c:	dd 4f       	sbci	r29, 0xFD	; 253
 26e:	ca 01       	movw	r24, r20
 270:	82 95       	swap	r24
 272:	92 95       	swap	r25
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	98 27       	eor	r25, r24
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	98 27       	eor	r25, r24
 27c:	0f 2e       	mov	r0, r31
 27e:	f6 ef       	ldi	r31, 0xF6	; 246
 280:	cf 2e       	mov	r12, r31
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	df 2e       	mov	r13, r31
 286:	f0 2d       	mov	r31, r0
 288:	c8 0e       	add	r12, r24
 28a:	d9 1e       	adc	r13, r25
	uchar col;
	uchar cmask;
	for(col = 0; col < 8; ++col)
	{
		cmask >>= 1;
		cmask |= ((diff[1][row][col] + diff[2][row][col] + diff[3][row][col] + diff[4][row][col]) > 8) << 7;
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	0f 2e       	mov	r0, r31
 290:	f0 e8       	ldi	r31, 0x80	; 128
 292:	bf 2e       	mov	r11, r31
 294:	f0 2d       	mov	r31, r0
	
	uchar col;
	uchar cmask;
	for(col = 0; col < 8; ++col)
	{
		cmask >>= 1;
 296:	43 2f       	mov	r20, r19
 298:	46 95       	lsr	r20
		cmask |= ((diff[1][row][col] + diff[2][row][col] + diff[3][row][col] + diff[4][row][col]) > 8) << 7;
 29a:	2d 91       	ld	r18, X+
 29c:	3d 91       	ld	r19, X+
 29e:	f7 01       	movw	r30, r14
 2a0:	81 91       	ld	r24, Z+
 2a2:	91 91       	ld	r25, Z+
 2a4:	7f 01       	movw	r14, r30
 2a6:	f8 01       	movw	r30, r16
 2a8:	61 91       	ld	r22, Z+
 2aa:	71 91       	ld	r23, Z+
 2ac:	8f 01       	movw	r16, r30
 2ae:	e9 91       	ld	r30, Y+
 2b0:	f9 91       	ld	r31, Y+
 2b2:	82 0f       	add	r24, r18
 2b4:	93 1f       	adc	r25, r19
 2b6:	86 0f       	add	r24, r22
 2b8:	97 1f       	adc	r25, r23
 2ba:	8e 0f       	add	r24, r30
 2bc:	9f 1f       	adc	r25, r31
 2be:	89 30       	cpi	r24, 0x09	; 9
 2c0:	91 05       	cpc	r25, r1
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <LED_Display+0xe8>
 2c4:	3b 2d       	mov	r19, r11
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <LED_Display+0xea>
 2c8:	35 2f       	mov	r19, r21
 2ca:	34 2b       	or	r19, r20
	uchar row = state & 0b0111;
	uchar pwm = state >> 3;
	
	uchar col;
	uchar cmask;
	for(col = 0; col < 8; ++col)
 2cc:	ac 15       	cp	r26, r12
 2ce:	bd 05       	cpc	r27, r13
 2d0:	11 f7       	brne	.-60     	; 0x296 <LED_Display+0xb6>
	{
		cmask >>= 1;
		cmask |= ((diff[1][row][col] + diff[2][row][col] + diff[3][row][col] + diff[4][row][col]) > 8) << 7;
	}
	
	LED_MatrixTransmit(cmask, 0, 0, 1 << row);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	ac 01       	movw	r20, r24
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <LED_Display+0xfe>
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	aa 94       	dec	r10
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <LED_Display+0xfa>
 2e2:	5a 01       	movw	r10, r20
 2e4:	83 2f       	mov	r24, r19
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	2a 2d       	mov	r18, r10
 2ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_MatrixTransmit>
	
	return state;
}
 2f0:	89 2d       	mov	r24, r9
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	bf 90       	pop	r11
 304:	af 90       	pop	r10
 306:	9f 90       	pop	r9
 308:	08 95       	ret

0000030a <ADC_Setup>:
	PORTB &= ~1;
}

void ADC_Setup()
{
	SFIOR |= /*(1 << PUD) |*/ (1 << ACME); //Pull-up disable, Analog Converter Multiplexer enable
 30a:	80 b7       	in	r24, 0x30	; 48
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	80 bf       	out	0x30, r24	; 48
	
	ADMUX = 0;//(1 << REFS0);// | (1 << ADLAR);
 310:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) /*| (1 << ADPS0)*/; //enable, prescalar 64. 8,000,000 / 64 = 125,000
 312:	86 b1       	in	r24, 0x06	; 6
 314:	86 68       	ori	r24, 0x86	; 134
 316:	86 b9       	out	0x06, r24	; 6
}
 318:	08 95       	ret

0000031a <analogRead>:

unsigned short analogRead(unsigned char channel)
{
	unsigned char chan = (channel & 0b00000111);
	ADMUX = (ADMUX & ~7) | chan;
 31a:	97 b1       	in	r25, 0x07	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) /*| (1 << ADPS0)*/; //enable, prescalar 64. 8,000,000 / 64 = 125,000
}

unsigned short analogRead(unsigned char channel)
{
	unsigned char chan = (channel & 0b00000111);
 31c:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & ~7) | chan;
 31e:	98 7f       	andi	r25, 0xF8	; 248
 320:	98 2b       	or	r25, r24
 322:	97 b9       	out	0x07, r25	; 7
	//ADCSRA &= ~(1 << ADEN);
	//ADCSRA |= (1<<ADEN);
	ADCSRA |= 1 << ADSC; // start analog read
 324:	36 9a       	sbi	0x06, 6	; 6
	
	//224
	//141
	while(!(ADCSRA & (1<<ADIF))); //poll until ready
 326:	34 9b       	sbis	0x06, 4	; 6
 328:	fe cf       	rjmp	.-4      	; 0x326 <analogRead+0xc>
	//DDRA |= chan;
	return ADC;
 32a:	84 b1       	in	r24, 0x04	; 4
 32c:	95 b1       	in	r25, 0x05	; 5
}
 32e:	08 95       	ret

00000330 <LED_Input>:
	
	return state;
}

uchar LED_Input(uchar state)
{
 330:	df 92       	push	r13
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
	DDRA = 0x00; //input
 33e:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00; // no pull-up
 340:	1b ba       	out	0x1b, r1	; 27
	++state;
 342:	d8 2f       	mov	r29, r24
 344:	df 5f       	subi	r29, 0xFF	; 255
	uchar row = (state >> 3) & 0b0111;
	uchar col = state & 0b0111;
 346:	cd 2f       	mov	r28, r29
 348:	c7 70       	andi	r28, 0x07	; 7
	uchar pass = (state >> 6) + 1;
 34a:	dd 2e       	mov	r13, r29
 34c:	d6 94       	lsr	r13
 34e:	d6 94       	lsr	r13
 350:	d6 94       	lsr	r13
 352:	d6 94       	lsr	r13
 354:	d6 94       	lsr	r13
 356:	d6 94       	lsr	r13
 358:	d3 94       	inc	r13
	ushort val = 0;
	
	LED_MatrixTransmit(1 << col, 1 << col, 1 << col, 1 << row);
 35a:	ec 2e       	mov	r14, r28
 35c:	ff 24       	eor	r15, r15
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	ac 01       	movw	r20, r24
 364:	0c 2e       	mov	r0, r28
 366:	02 c0       	rjmp	.+4      	; 0x36c <LED_Input+0x3c>
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <LED_Input+0x38>
uchar LED_Input(uchar state)
{
	DDRA = 0x00; //input
	PORTA = 0x00; // no pull-up
	++state;
	uchar row = (state >> 3) & 0b0111;
 370:	2d 2f       	mov	r18, r29
 372:	26 95       	lsr	r18
 374:	26 95       	lsr	r18
 376:	26 95       	lsr	r18
 378:	27 70       	andi	r18, 0x07	; 7
	uchar col = state & 0b0111;
	uchar pass = (state >> 6) + 1;
	ushort val = 0;
	
	LED_MatrixTransmit(1 << col, 1 << col, 1 << col, 1 << row);
 37a:	02 2f       	mov	r16, r18
 37c:	10 e0       	ldi	r17, 0x00	; 0
 37e:	bc 01       	movw	r22, r24
 380:	02 c0       	rjmp	.+4      	; 0x386 <LED_Input+0x56>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	2a 95       	dec	r18
 388:	e2 f7       	brpl	.-8      	; 0x382 <LED_Input+0x52>
 38a:	9b 01       	movw	r18, r22
 38c:	84 2f       	mov	r24, r20
 38e:	64 2f       	mov	r22, r20
 390:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_MatrixTransmit>
	val = analogRead(col);
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 8d 01 	call	0x31a	; 0x31a <analogRead>
 39a:	ac 01       	movw	r20, r24
	
	if(val > diff[0][row][col])
 39c:	f8 01       	movw	r30, r16
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ee 0d       	add	r30, r14
 3ac:	ff 1d       	adc	r31, r15
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	ea 59       	subi	r30, 0x9A	; 154
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	80 81       	ld	r24, Z
 3b8:	91 81       	ldd	r25, Z+1	; 0x01
 3ba:	84 17       	cp	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	78 f4       	brcc	.+30     	; 0x3de <LED_Input+0xae>
		diff[0][row][col] = val;
 3c0:	f8 01       	movw	r30, r16
 3c2:	ee 0f       	add	r30, r30
 3c4:	ff 1f       	adc	r31, r31
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ee 0d       	add	r30, r14
 3d0:	ff 1d       	adc	r31, r15
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	ea 59       	subi	r30, 0x9A	; 154
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	51 83       	std	Z+1, r21	; 0x01
 3dc:	40 83       	st	Z, r20
	
	diff[pass][row][col] = (diff[0][row][col] < val)?(0):(diff[0][row][col] - val);
 3de:	8d 2d       	mov	r24, r13
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	80 0f       	add	r24, r16
 3f0:	91 1f       	adc	r25, r17
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	8e 0d       	add	r24, r14
 400:	9f 1d       	adc	r25, r15
 402:	26 e6       	ldi	r18, 0x66	; 102
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	f9 01       	movw	r30, r18
 40c:	e8 0f       	add	r30, r24
 40e:	f9 1f       	adc	r31, r25
 410:	c8 01       	movw	r24, r16
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	8e 0d       	add	r24, r14
 420:	9f 1d       	adc	r25, r15
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	dc 01       	movw	r26, r24
 42c:	8d 91       	ld	r24, X+
 42e:	9c 91       	ld	r25, X
 430:	11 97       	sbiw	r26, 0x01	; 1
 432:	84 1b       	sub	r24, r20
 434:	95 0b       	sbc	r25, r21
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	80 83       	st	Z, r24
	//PORTB &= ~1;
	
	
	
	return state;
}
 43a:	8d 2f       	mov	r24, r29
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	08 95       	ret

0000044c <calibrate>:

void calibrate()
{
 44c:	8f 92       	push	r8
 44e:	9f 92       	push	r9
 450:	af 92       	push	r10
 452:	bf 92       	push	r11
 454:	cf 92       	push	r12
 456:	df 92       	push	r13
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
	DDRA = 0x00;
 464:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 466:	1b ba       	out	0x1b, r1	; 27
 468:	aa 24       	eor	r10, r10
 46a:	bb 24       	eor	r11, r11
	ushort val;
	for(col = 0; col < 8; ++col)
	{
		for(row = 0; row < 8; ++row)
		{
			LED_MatrixTransmit(1 << col, 1 << col, 1 << col, 1 << row);
 46c:	cc 24       	eor	r12, r12
 46e:	dd 24       	eor	r13, r13
 470:	c3 94       	inc	r12
	
	
	return state;
}

void calibrate()
 472:	88 24       	eor	r8, r8
 474:	99 24       	eor	r9, r9
 476:	25 c0       	rjmp	.+74     	; 0x4c2 <calibrate+0x76>
	ushort val;
	for(col = 0; col < 8; ++col)
	{
		for(row = 0; row < 8; ++row)
		{
			LED_MatrixTransmit(1 << col, 1 << col, 1 << col, 1 << row);
 478:	96 01       	movw	r18, r12
 47a:	0c 2e       	mov	r0, r28
 47c:	02 c0       	rjmp	.+4      	; 0x482 <calibrate+0x36>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <calibrate+0x32>
 486:	81 2f       	mov	r24, r17
 488:	61 2f       	mov	r22, r17
 48a:	41 2f       	mov	r20, r17
 48c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LED_MatrixTransmit>
			val = analogRead(col);
 490:	80 2f       	mov	r24, r16
 492:	0e 94 8d 01 	call	0x31a	; 0x31a <analogRead>
			val = analogRead(col);
 496:	80 2f       	mov	r24, r16
 498:	0e 94 8d 01 	call	0x31a	; 0x31a <analogRead>
			diff[0][row][col] = val;
 49c:	d7 01       	movw	r26, r14
 49e:	11 96       	adiw	r26, 0x01	; 1
 4a0:	9c 93       	st	X, r25
 4a2:	8e 93       	st	-X, r24
 4a4:	21 96       	adiw	r28, 0x01	; 1
 4a6:	e0 e1       	ldi	r30, 0x10	; 16
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	ee 0e       	add	r14, r30
 4ac:	ff 1e       	adc	r15, r31
	PORTA = 0x00;
	uchar row, col;
	ushort val;
	for(col = 0; col < 8; ++col)
	{
		for(row = 0; row < 8; ++row)
 4ae:	c8 30       	cpi	r28, 0x08	; 8
 4b0:	d1 05       	cpc	r29, r1
 4b2:	11 f7       	brne	.-60     	; 0x478 <calibrate+0x2c>
 4b4:	08 94       	sec
 4b6:	a1 1c       	adc	r10, r1
 4b8:	b1 1c       	adc	r11, r1
{
	DDRA = 0x00;
	PORTA = 0x00;
	uchar row, col;
	ushort val;
	for(col = 0; col < 8; ++col)
 4ba:	f8 e0       	ldi	r31, 0x08	; 8
 4bc:	af 16       	cp	r10, r31
 4be:	b1 04       	cpc	r11, r1
 4c0:	b1 f0       	breq	.+44     	; 0x4ee <calibrate+0xa2>
 4c2:	0a 2d       	mov	r16, r10
	{
		for(row = 0; row < 8; ++row)
		{
			LED_MatrixTransmit(1 << col, 1 << col, 1 << col, 1 << row);
 4c4:	c6 01       	movw	r24, r12
 4c6:	0a 2c       	mov	r0, r10
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <calibrate+0x82>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <calibrate+0x7e>
 4d2:	18 2f       	mov	r17, r24
	
	
	return state;
}

void calibrate()
 4d4:	c5 01       	movw	r24, r10
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0f 2e       	mov	r0, r31
 4dc:	f6 e6       	ldi	r31, 0x66	; 102
 4de:	ef 2e       	mov	r14, r31
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	ff 2e       	mov	r15, r31
 4e4:	f0 2d       	mov	r31, r0
 4e6:	e8 0e       	add	r14, r24
 4e8:	f9 1e       	adc	r15, r25
 4ea:	e4 01       	movw	r28, r8
 4ec:	c5 cf       	rjmp	.-118    	; 0x478 <calibrate+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	99 e6       	ldi	r25, 0x69	; 105
 4f2:	a8 e1       	ldi	r26, 0x18	; 24
 4f4:	81 50       	subi	r24, 0x01	; 1
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	a0 40       	sbci	r26, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <calibrate+0xa8>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <calibrate+0xb2>
 4fe:	00 00       	nop
			diff[0][row][col] = val;
			
		}
	}
	_delay_ms(1000);
}
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	df 90       	pop	r13
 50e:	cf 90       	pop	r12
 510:	bf 90       	pop	r11
 512:	af 90       	pop	r10
 514:	9f 90       	pop	r9
 516:	8f 90       	pop	r8
 518:	08 95       	ret

0000051a <main>:

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 51a:	1a ba       	out	0x1a, r1	; 26
 51c:	cf ef       	ldi	r28, 0xFF	; 255
 51e:	cb bb       	out	0x1b, r28	; 27
	DDRB = 0xFF; PORTB = 0x00;
 520:	c7 bb       	out	0x17, r28	; 23
 522:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00; PORTC = 0xFF;
 524:	14 ba       	out	0x14, r1	; 20
 526:	c5 bb       	out	0x15, r28	; 21
	SPI_Setup();
 528:	0e 94 ca 00 	call	0x194	; 0x194 <SPI_Setup>
	ADC_Setup();
 52c:	0e 94 85 01 	call	0x30a	; 0x30a <ADC_Setup>
	TimerSet(1);
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 49 00 	call	0x92	; 0x92 <TimerSet>
	TimerOn();
 53c:	0e 94 71 00 	call	0xe2	; 0xe2 <TimerOn>
enum {TOUCH, LED_M, NUM_TASKS}; //to reorder tasks, simply reorder this enum
task tasks[NUM_TASKS];

inline void taskInit(uchar n, ulong period, uchar(*fnct)(uchar))
{
	tasks[n].state=0xFF;
 540:	c0 93 f6 02 	sts	0x02F6, r28
	tasks[n].period = period;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	a0 e0       	ldi	r26, 0x00	; 0
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	80 93 f7 02 	sts	0x02F7, r24
 550:	90 93 f8 02 	sts	0x02F8, r25
 554:	a0 93 f9 02 	sts	0x02F9, r26
 558:	b0 93 fa 02 	sts	0x02FA, r27
	tasks[n].elapsedTime = period;
 55c:	80 93 fb 02 	sts	0x02FB, r24
 560:	90 93 fc 02 	sts	0x02FC, r25
 564:	a0 93 fd 02 	sts	0x02FD, r26
 568:	b0 93 fe 02 	sts	0x02FE, r27
	tasks[n].TickFct = fnct;
 56c:	20 ef       	ldi	r18, 0xF0	; 240
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	30 93 00 03 	sts	0x0300, r19
 574:	20 93 ff 02 	sts	0x02FF, r18
enum {TOUCH, LED_M, NUM_TASKS}; //to reorder tasks, simply reorder this enum
task tasks[NUM_TASKS];

inline void taskInit(uchar n, ulong period, uchar(*fnct)(uchar))
{
	tasks[n].state=0xFF;
 578:	eb ee       	ldi	r30, 0xEB	; 235
 57a:	f2 e0       	ldi	r31, 0x02	; 2
 57c:	c0 83       	st	Z, r28
	tasks[n].period = period;
 57e:	81 83       	std	Z+1, r24	; 0x01
 580:	92 83       	std	Z+2, r25	; 0x02
 582:	a3 83       	std	Z+3, r26	; 0x03
 584:	b4 83       	std	Z+4, r27	; 0x04
	tasks[n].elapsedTime = period;
 586:	85 83       	std	Z+5, r24	; 0x05
 588:	96 83       	std	Z+6, r25	; 0x06
 58a:	a7 83       	std	Z+7, r26	; 0x07
 58c:	b0 87       	std	Z+8, r27	; 0x08
	tasks[n].TickFct = fnct;
 58e:	88 e9       	ldi	r24, 0x98	; 152
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	92 87       	std	Z+10, r25	; 0x0a
 594:	81 87       	std	Z+9, r24	; 0x09
	taskInit(LED_M,1,LED_Display);
	taskInit(TOUCH,1,LED_Input);
	uchar index = 0;
	ushort temp = 0,temp2 = 0;
	uchar i;
	calibrate();
 596:	0e 94 26 02 	call	0x44c	; 0x44c <calibrate>
			//index = LED_Input(index);
		
		//if(~PINC & 1)
		//	calibrate();
		
		for (i = 0; i < NUM_TASKS; ++i) { // Heart of scheduler code
 59a:	10 e0       	ldi	r17, 0x00	; 0
			if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
 59c:	0f 2e       	mov	r0, r31
 59e:	fb ee       	ldi	r31, 0xEB	; 235
 5a0:	cf 2e       	mov	r12, r31
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	df 2e       	mov	r13, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	48 c0       	rjmp	.+144    	; 0x63a <main+0x120>
 5aa:	e1 2e       	mov	r14, r17
 5ac:	ff 24       	eor	r15, r15
 5ae:	f7 01       	movw	r30, r14
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	c7 01       	movw	r24, r14
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	e8 0f       	add	r30, r24
 5c4:	f9 1f       	adc	r31, r25
 5c6:	ee 0d       	add	r30, r14
 5c8:	ff 1d       	adc	r31, r15
 5ca:	ec 0d       	add	r30, r12
 5cc:	fd 1d       	adc	r31, r13
 5ce:	85 81       	ldd	r24, Z+5	; 0x05
 5d0:	96 81       	ldd	r25, Z+6	; 0x06
 5d2:	a7 81       	ldd	r26, Z+7	; 0x07
 5d4:	b0 85       	ldd	r27, Z+8	; 0x08
 5d6:	41 81       	ldd	r20, Z+1	; 0x01
 5d8:	52 81       	ldd	r21, Z+2	; 0x02
 5da:	63 81       	ldd	r22, Z+3	; 0x03
 5dc:	74 81       	ldd	r23, Z+4	; 0x04
 5de:	84 17       	cp	r24, r20
 5e0:	95 07       	cpc	r25, r21
 5e2:	a6 07       	cpc	r26, r22
 5e4:	b7 07       	cpc	r27, r23
 5e6:	58 f0       	brcs	.+22     	; 0x5fe <main+0xe4>
				tasks[i].state = tasks[i].TickFct(tasks[i].state);
 5e8:	ef 01       	movw	r28, r30
 5ea:	01 84       	ldd	r0, Z+9	; 0x09
 5ec:	f2 85       	ldd	r31, Z+10	; 0x0a
 5ee:	e0 2d       	mov	r30, r0
 5f0:	88 81       	ld	r24, Y
 5f2:	09 95       	icall
 5f4:	88 83       	st	Y, r24
				tasks[i].elapsedTime = 0;
 5f6:	1d 82       	std	Y+5, r1	; 0x05
 5f8:	1e 82       	std	Y+6, r1	; 0x06
 5fa:	1f 82       	std	Y+7, r1	; 0x07
 5fc:	18 86       	std	Y+8, r1	; 0x08
			}
			++tasks[i].elapsedTime;
 5fe:	97 01       	movw	r18, r14
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	c7 01       	movw	r24, r14
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	82 0f       	add	r24, r18
 614:	93 1f       	adc	r25, r19
 616:	8e 0d       	add	r24, r14
 618:	9f 1d       	adc	r25, r15
 61a:	f6 01       	movw	r30, r12
 61c:	e8 0f       	add	r30, r24
 61e:	f9 1f       	adc	r31, r25
 620:	45 81       	ldd	r20, Z+5	; 0x05
 622:	56 81       	ldd	r21, Z+6	; 0x06
 624:	67 81       	ldd	r22, Z+7	; 0x07
 626:	70 85       	ldd	r23, Z+8	; 0x08
 628:	4f 5f       	subi	r20, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	6f 4f       	sbci	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	45 83       	std	Z+5, r20	; 0x05
 632:	56 83       	std	Z+6, r21	; 0x06
 634:	67 83       	std	Z+7, r22	; 0x07
 636:	70 87       	std	Z+8, r23	; 0x08
			//index = LED_Input(index);
		
		//if(~PINC & 1)
		//	calibrate();
		
		for (i = 0; i < NUM_TASKS; ++i) { // Heart of scheduler code
 638:	1f 5f       	subi	r17, 0xFF	; 255
 63a:	12 30       	cpi	r17, 0x02	; 2
 63c:	08 f4       	brcc	.+2      	; 0x640 <main+0x126>
 63e:	b5 cf       	rjmp	.-150    	; 0x5aa <main+0x90>
				tasks[i].elapsedTime = 0;
			}
			++tasks[i].elapsedTime;
		}
		
		while(!TimerFlag);
 640:	80 91 ea 02 	lds	r24, 0x02EA
 644:	88 23       	and	r24, r24
 646:	e1 f3       	breq	.-8      	; 0x640 <main+0x126>
		TimerFlag = 0;
 648:	10 92 ea 02 	sts	0x02EA, r1
			//index = LED_Input(index);
		
		//if(~PINC & 1)
		//	calibrate();
		
		for (i = 0; i < NUM_TASKS; ++i) { // Heart of scheduler code
 64c:	10 e0       	ldi	r17, 0x00	; 0
			++tasks[i].elapsedTime;
		}
		
		while(!TimerFlag);
		TimerFlag = 0;
    }
 64e:	f5 cf       	rjmp	.-22     	; 0x63a <main+0x120>

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
