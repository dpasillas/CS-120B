
dpasi001_lab8_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  0000074e  000007e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008000e4  008000e4  00000866  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c61  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000036e  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046d  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070f  00000000  00000000  00002a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3e       	cpi	r26, 0xE4	; 228
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 ee       	ldi	r26, 0xE4	; 228
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 32       	cpi	r26, 0x2D	; 45
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  8a:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LT_Tick>:
enum LT_States { LT_s0, LT_WaitLcdRdy, LT_WaitButton, LT_FillAndDispString,
				LT_HoldGo1, LT_WaitBtnRelease } LT_State;
char LT_Tick(char LT_State) {
	static unsigned short j;
	static unsigned char i, x, c;
	switch(LT_State) { // Transitions
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	99 f0       	breq	.+38     	; 0xbc <LT_Tick+0x2a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	28 f4       	brcc	.+10     	; 0xa4 <LT_Tick+0x12>
  9a:	88 23       	and	r24, r24
  9c:	31 f1       	breq	.+76     	; 0xea <LT_Tick+0x58>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	d9 f4       	brne	.+54     	; 0xd8 <LT_Tick+0x46>
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <LT_Tick+0x20>
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	79 f0       	breq	.+30     	; 0xc6 <LT_Tick+0x34>
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	08 f1       	brcs	.+66     	; 0xee <LT_Tick+0x5c>
  ac:	85 30       	cpi	r24, 0x05	; 5
  ae:	a1 f4       	brne	.+40     	; 0xd8 <LT_Tick+0x46>
  b0:	0e c0       	rjmp	.+28     	; 0xce <LT_Tick+0x3c>
		break;
	case LT_s0:
		LT_State = LT_WaitLcdRdy;
		break;
	case LT_WaitLcdRdy:
		if (!LCD_rdy_g) {
  b2:	90 91 e6 00 	lds	r25, 0x00E6
  b6:	99 23       	and	r25, r25
  b8:	e1 f4       	brne	.+56     	; 0xf2 <LT_Tick+0x60>
  ba:	08 95       	ret
		else if (LCD_rdy_g) {
			LT_State = LT_WaitButton;
		}
		break;
	case LT_WaitButton:
		if (!adv){//GetBit(PINA,0)==1) {
  bc:	90 91 e4 00 	lds	r25, 0x00E4
  c0:	99 23       	and	r25, r25
  c2:	a1 f0       	breq	.+40     	; 0xec <LT_Tick+0x5a>
  c4:	0d c0       	rjmp	.+26     	; 0xe0 <LT_Tick+0x4e>
		break;
	case LT_FillAndDispString:
		LT_State = LT_HoldGo1;
		break;
	case LT_HoldGo1:
		LCD_go_g=0;
  c6:	10 92 e5 00 	sts	0x00E5, r1
		LT_State = LT_WaitBtnRelease;
  ca:	85 e0       	ldi	r24, 0x05	; 5
		break;
  cc:	08 95       	ret
	case LT_WaitBtnRelease:
		if (adv){//GetBit(PINA,0)==0) { // Wait for button release
  ce:	90 91 e4 00 	lds	r25, 0x00E4
  d2:	99 23       	and	r25, r25
  d4:	59 f4       	brne	.+22     	; 0xec <LT_Tick+0x5a>
  d6:	0f c0       	rjmp	.+30     	; 0xf6 <LT_Tick+0x64>
		LT_State = LT_s0;
	} // Transitions
	
	switch(LT_State) { // State actions
	case LT_s0:
		LCD_go_g=0;
  d8:	10 92 e5 00 	sts	0x00E5, r1
		//strcpy(LCD_string_g, "1234567890123456"); // Init, but never seen, shows use of strcpy though
		break;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
		}
		LCD_string_g[i] = '\0'; // End-of-string char*/
		//if(str[26] == 0) // str[64 - str_len] // mystr_len - 16 == 64
		//    str = mystr;
		//LCD_string_g = str;
		LCD_go_g = 1; // Display string
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 e5 00 	sts	0x00E5, r24
		break;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	08 95       	ret
	switch(LT_State) { // Transitions
	case -1:
		LT_State = LT_s0;
		break;
	case LT_s0:
		LT_State = LT_WaitLcdRdy;
  ea:	81 e0       	ldi	r24, 0x01	; 1
		break;
	default:
		break;
	} // State actions
	return LT_State;
}
  ec:	08 95       	ret
		else if (adv){//GetBit(PINA,0)==0) { // Button active low
			LT_State = LT_FillAndDispString;
		}
		break;
	case LT_FillAndDispString:
		LT_State = LT_HoldGo1;
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	08 95       	ret
	case LT_WaitLcdRdy:
		if (!LCD_rdy_g) {
			LT_State = LT_WaitLcdRdy;
		}
		else if (LCD_rdy_g) {
			LT_State = LT_WaitButton;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	08 95       	ret
	case LT_WaitBtnRelease:
		if (adv){//GetBit(PINA,0)==0) { // Wait for button release
			LT_State = LT_WaitBtnRelease;
		}
		else if (!adv){//GetBit(PINA,0)==1) {
			LT_State = LT_WaitLcdRdy;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret

000000fa <advanceTick>:
//LCD CODE//

enum {NOTIFY, UNNOTIFY};
char advanceTick(char state)
{
	switch(state) // transitions
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	69 f0       	breq	.+26     	; 0x118 <advanceTick+0x1e>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	38 f0       	brcs	.+14     	; 0x110 <advanceTick+0x16>
 102:	8f 3f       	cpi	r24, 0xFF	; 255
 104:	29 f0       	breq	.+10     	; 0x110 <advanceTick+0x16>
			case UNNOTIFY: state = NOTIFY; break; 
			case NOTIFY: state = UNNOTIFY; break;
			default: break;
		}
		
		switch(state)
 106:	88 23       	and	r24, r24
 108:	41 f0       	breq	.+16     	; 0x11a <advanceTick+0x20>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	09 f5       	brne	.+66     	; 0x150 <advanceTick+0x56>
 10e:	01 c0       	rjmp	.+2      	; 0x112 <advanceTick+0x18>
//LCD CODE//

enum {NOTIFY, UNNOTIFY};
char advanceTick(char state)
{
	switch(state) // transitions
 110:	81 e0       	ldi	r24, 0x01	; 1
			default: break;
		}
		
		switch(state)
		{
			case UNNOTIFY: adv = 0; break;
 112:	10 92 e4 00 	sts	0x00E4, r1
 116:	08 95       	ret
char advanceTick(char state)
{
	switch(state) // transitions
		{
			case (char)-1: state = UNNOTIFY; adv = 0; break;
			case UNNOTIFY: state = NOTIFY; break; 
 118:	80 e0       	ldi	r24, 0x00	; 0
		}
		
		switch(state)
		{
			case UNNOTIFY: adv = 0; break;
			case NOTIFY: adv = 1;
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	90 93 e4 00 	sts	0x00E4, r25
				LCD_string_g = str++;
 120:	e0 91 79 00 	lds	r30, 0x0079
 124:	f0 91 7a 00 	lds	r31, 0x007A
 128:	f0 93 cc 00 	sts	0x00CC, r31
 12c:	e0 93 cb 00 	sts	0x00CB, r30
 130:	9f 01       	movw	r18, r30
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	30 93 7a 00 	sts	0x007A, r19
 13a:	20 93 79 00 	sts	0x0079, r18
				if(str[26] == 0)
 13e:	93 8d       	ldd	r25, Z+27	; 0x1b
 140:	99 23       	and	r25, r25
 142:	31 f4       	brne	.+12     	; 0x150 <advanceTick+0x56>
					str = mystr;
 144:	2b e7       	ldi	r18, 0x7B	; 123
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	30 93 7a 00 	sts	0x007A, r19
 14c:	20 93 79 00 	sts	0x0079, r18
			default: break;
		}		
		//adv = key;
	return state;
}
 150:	08 95       	ret

00000152 <SetBit>:
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 152:	44 23       	and	r20, r20
 154:	51 f0       	breq	.+20     	; 0x16a <SetBit+0x18>
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	9a 01       	movw	r18, r20
 15c:	02 c0       	rjmp	.+4      	; 0x162 <SetBit+0x10>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <SetBit+0xc>
 166:	82 2b       	or	r24, r18
 168:	08 95       	ret
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	a9 01       	movw	r20, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <SetBit+0x24>
 172:	44 0f       	add	r20, r20
 174:	55 1f       	adc	r21, r21
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <SetBit+0x20>
 17a:	ba 01       	movw	r22, r20
 17c:	60 95       	com	r22
 17e:	86 23       	and	r24, r22
}
 180:	08 95       	ret

00000182 <GetBit>:
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	a9 01       	movw	r20, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <GetBit+0xc>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <GetBit+0x8>
}
 192:	84 23       	and	r24, r20
 194:	08 95       	ret

00000196 <TimerOn>:
volatile unsigned short lp = 300, bp = 1000, lt = 300, bt = 1000,
sp = 2, st = 2;

void TimerOn() {
	// AVR timer/counter controller register TCCR0
	TCCR0 = 0x0B;	// bit3bit6=10: CTC mode (clear timer on compare)
 196:	8b e0       	ldi	r24, 0x0B	; 11
 198:	83 bf       	out	0x33, r24	; 51
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT0 register will count at 125,000 ticks/s

	// AVR output compare register OCR0.
	OCR0 = 125;	// Timer interrupt will be generated when TCNT0==OCR0
 19a:	8d e7       	ldi	r24, 0x7D	; 125
 19c:	8c bf       	out	0x3c, r24	; 60
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT0 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK = 0x02; // bit1: OCIE0 -- enables compare match interrupt
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0=0;
 1a2:	12 be       	out	0x32, r1	; 50

	_avr_timer_cntcurr = _avr_timer_M;
 1a4:	80 91 df 00 	lds	r24, 0x00DF
 1a8:	90 91 e0 00 	lds	r25, 0x00E0
 1ac:	a0 91 e1 00 	lds	r26, 0x00E1
 1b0:	b0 91 e2 00 	lds	r27, 0x00E2
 1b4:	80 93 e8 00 	sts	0x00E8, r24
 1b8:	90 93 e9 00 	sts	0x00E9, r25
 1bc:	a0 93 ea 00 	sts	0x00EA, r26
 1c0:	b0 93 eb 00 	sts	0x00EB, r27
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
 1c4:	8f b7       	in	r24, 0x3f	; 63
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	8f bf       	out	0x3f, r24	; 63
}
 1ca:	08 95       	ret

000001cc <TimerOff>:

void TimerOff() {
	TCCR0 = 0x00; // bit2bit1bit0=000: timer off
 1cc:	13 be       	out	0x33, r1	; 51
}
 1ce:	08 95       	ret

000001d0 <TimerISR>:

void TimerISR() {
	TimerFlag = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 ec 00 	sts	0x00EC, r24
}
 1d6:	08 95       	ret

000001d8 <__vector_10>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect) {
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	--_avr_timer_cntcurr; // Count down to 0 rather than up to TOP
 1fa:	80 91 e8 00 	lds	r24, 0x00E8
 1fe:	90 91 e9 00 	lds	r25, 0x00E9
 202:	a0 91 ea 00 	lds	r26, 0x00EA
 206:	b0 91 eb 00 	lds	r27, 0x00EB
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	a1 09       	sbc	r26, r1
 20e:	b1 09       	sbc	r27, r1
 210:	80 93 e8 00 	sts	0x00E8, r24
 214:	90 93 e9 00 	sts	0x00E9, r25
 218:	a0 93 ea 00 	sts	0x00EA, r26
 21c:	b0 93 eb 00 	sts	0x00EB, r27
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	a1 05       	cpc	r26, r1
 224:	b1 05       	cpc	r27, r1
 226:	91 f4       	brne	.+36     	; 0x24c <__vector_10+0x74>
	TimerISR(); // Call the ISR that the user uses
 228:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <TimerISR>
	_avr_timer_cntcurr = _avr_timer_M;
 22c:	80 91 df 00 	lds	r24, 0x00DF
 230:	90 91 e0 00 	lds	r25, 0x00E0
 234:	a0 91 e1 00 	lds	r26, 0x00E1
 238:	b0 91 e2 00 	lds	r27, 0x00E2
 23c:	80 93 e8 00 	sts	0x00E8, r24
 240:	90 93 e9 00 	sts	0x00E9, r25
 244:	a0 93 ea 00 	sts	0x00EA, r26
 248:	b0 93 eb 00 	sts	0x00EB, r27
}
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 26e:	dc 01       	movw	r26, r24
 270:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
 272:	80 93 df 00 	sts	0x00DF, r24
 276:	90 93 e0 00 	sts	0x00E0, r25
 27a:	a0 93 e1 00 	sts	0x00E1, r26
 27e:	b0 93 e2 00 	sts	0x00E2, r27
	_avr_timer_cntcurr = _avr_timer_M;
 282:	80 93 e8 00 	sts	0x00E8, r24
 286:	90 93 e9 00 	sts	0x00E9, r25
 28a:	a0 93 ea 00 	sts	0x00EA, r26
 28e:	b0 93 eb 00 	sts	0x00EB, r27
}
 292:	08 95       	ret

00000294 <GetKeypadKey>:


unsigned char GetKeypadKey() {
 294:	af 92       	push	r10
 296:	bf 92       	push	r11
 298:	cf 92       	push	r12
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	60 97       	sbiw	r28, 0x10	; 16
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
	unsigned char keys[4][4] = {{'1','4','7','*'},{'2','5','8','0'},{'3','6','9','#'},{'A','B','C','D'}};
 2b8:	de 01       	movw	r26, r28
 2ba:	11 96       	adiw	r26, 0x01	; 1
 2bc:	e0 e6       	ldi	r30, 0x60	; 96
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 e1       	ldi	r24, 0x10	; 16
 2c2:	01 90       	ld	r0, Z+
 2c4:	0d 92       	st	X+, r0
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <GetKeypadKey+0x2e>
	
	for(int i = 0; i < 4; ++i)
 2ca:	ee 24       	eor	r14, r14
 2cc:	ff 24       	eor	r15, r15
	{
		PORTC = ~(1 << (4 + i));
 2ce:	cc 24       	eor	r12, r12
 2d0:	dd 24       	eor	r13, r13
 2d2:	c3 94       	inc	r12
		asm("nop");
		for(int j = 0; j < 4; j++)
 2d4:	aa 24       	eor	r10, r10
 2d6:	bb 24       	eor	r11, r11
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}


unsigned char GetKeypadKey() {
 2d8:	c7 01       	movw	r24, r14
 2da:	04 96       	adiw	r24, 0x04	; 4
	unsigned char keys[4][4] = {{'1','4','7','*'},{'2','5','8','0'},{'3','6','9','#'},{'A','B','C','D'}};
	
	for(int i = 0; i < 4; ++i)
	{
		PORTC = ~(1 << (4 + i));
 2dc:	96 01       	movw	r18, r12
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GetKeypadKey+0x50>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	8a 95       	dec	r24
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GetKeypadKey+0x4c>
 2e8:	c9 01       	movw	r24, r18
 2ea:	80 95       	com	r24
 2ec:	85 bb       	out	0x15, r24	; 21
		asm("nop");
 2ee:	00 00       	nop
		for(int j = 0; j < 4; j++)
 2f0:	85 01       	movw	r16, r10
			if(GetBit(PINC,j) == 0)
 2f2:	83 b3       	in	r24, 0x13	; 19
 2f4:	60 2f       	mov	r22, r16
 2f6:	0e 94 c1 00 	call	0x182	; 0x182 <GetBit>
 2fa:	88 23       	and	r24, r24
 2fc:	61 f4       	brne	.+24     	; 0x316 <GetKeypadKey+0x82>
				return keys[i][j];
 2fe:	f7 01       	movw	r30, r14
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	0e 0f       	add	r16, r30
 30a:	1f 1f       	adc	r17, r31
 30c:	fe 01       	movw	r30, r28
 30e:	e0 0f       	add	r30, r16
 310:	f1 1f       	adc	r31, r17
 312:	81 81       	ldd	r24, Z+1	; 0x01
 314:	0d c0       	rjmp	.+26     	; 0x330 <GetKeypadKey+0x9c>
	
	for(int i = 0; i < 4; ++i)
	{
		PORTC = ~(1 << (4 + i));
		asm("nop");
		for(int j = 0; j < 4; j++)
 316:	0f 5f       	subi	r16, 0xFF	; 255
 318:	1f 4f       	sbci	r17, 0xFF	; 255
 31a:	04 30       	cpi	r16, 0x04	; 4
 31c:	11 05       	cpc	r17, r1
 31e:	49 f7       	brne	.-46     	; 0x2f2 <GetKeypadKey+0x5e>


unsigned char GetKeypadKey() {
	unsigned char keys[4][4] = {{'1','4','7','*'},{'2','5','8','0'},{'3','6','9','#'},{'A','B','C','D'}};
	
	for(int i = 0; i < 4; ++i)
 320:	08 94       	sec
 322:	e1 1c       	adc	r14, r1
 324:	f1 1c       	adc	r15, r1
 326:	34 e0       	ldi	r19, 0x04	; 4
 328:	e3 16       	cp	r14, r19
 32a:	f1 04       	cpc	r15, r1
 32c:	a9 f6       	brne	.-86     	; 0x2d8 <GetKeypadKey+0x44>
		asm("nop");
		for(int j = 0; j < 4; j++)
			if(GetBit(PINC,j) == 0)
				return keys[i][j];
	}
	return 0;
 32e:	80 e0       	ldi	r24, 0x00	; 0
	if (GetBit(PINC,3)==0) { return('D'); }
	// Check keys in col 4
	// ... *****FINISH*****
	return('\0'); // default value
	*/
}
 330:	60 96       	adiw	r28, 0x10	; 16
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	bf 90       	pop	r11
 34e:	af 90       	pop	r10
 350:	08 95       	ret

00000352 <keyTick>:

uchar key = 0;
char keyTick(char state)
{
	key = GetKeypadKey();
 352:	0e 94 4a 01 	call	0x294	; 0x294 <GetKeypadKey>
 356:	80 93 e7 00 	sts	0x00E7, r24
	return 0;
}
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret

0000035e <LCD_WriteCmdStart>:
const unsigned char LCD_E = 4; // LCD Enable pin is PB4
unsigned char LCD_rdy_g = 0; // Set by LCD interface synchSM, ready to display new string
unsigned char LCD_go_g = 0; // Set by user synchSM wishing to display string in LCD_string_g
unsigned char tempStr[17];
unsigned char *LCD_string_g = tempStr;//[17]; // Filled by user synchSM, 16 chars plus end-of-string char
void LCD_WriteCmdStart(unsigned char cmd) {
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	18 2f       	mov	r17, r24
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_RS, 0);
 366:	c0 91 cf 00 	lds	r28, 0x00CF
 36a:	d0 91 d0 00 	lds	r29, 0x00D0
 36e:	88 81       	ld	r24, Y
 370:	63 e0       	ldi	r22, 0x03	; 3
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	0e 94 a9 00 	call	0x152	; 0x152 <SetBit>
 378:	88 83       	st	Y, r24
	*LCD_Data = cmd;
 37a:	e0 91 d1 00 	lds	r30, 0x00D1
 37e:	f0 91 d2 00 	lds	r31, 0x00D2
 382:	10 83       	st	Z, r17
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 1);
 384:	c0 91 cf 00 	lds	r28, 0x00CF
 388:	d0 91 d0 00 	lds	r29, 0x00D0
 38c:	88 81       	ld	r24, Y
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	0e 94 a9 00 	call	0x152	; 0x152 <SetBit>
 396:	88 83       	st	Y, r24
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <LCD_WriteCmdEnd>:
void LCD_WriteCmdEnd() {
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 0);
 3a4:	c0 91 cf 00 	lds	r28, 0x00CF
 3a8:	d0 91 d0 00 	lds	r29, 0x00D0
 3ac:	88 81       	ld	r24, Y
 3ae:	64 e0       	ldi	r22, 0x04	; 4
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	0e 94 a9 00 	call	0x152	; 0x152 <SetBit>
 3b6:	88 83       	st	Y, r24
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <LCD_WriteDataStart>:
void LCD_WriteDataStart(unsigned char Data) {
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	18 2f       	mov	r17, r24
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_RS,1);
 3c6:	c0 91 cf 00 	lds	r28, 0x00CF
 3ca:	d0 91 d0 00 	lds	r29, 0x00D0
 3ce:	88 81       	ld	r24, Y
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	0e 94 a9 00 	call	0x152	; 0x152 <SetBit>
 3d8:	88 83       	st	Y, r24
	*LCD_Data = Data;
 3da:	e0 91 d1 00 	lds	r30, 0x00D1
 3de:	f0 91 d2 00 	lds	r31, 0x00D2
 3e2:	10 83       	st	Z, r17
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 1);
 3e4:	c0 91 cf 00 	lds	r28, 0x00CF
 3e8:	d0 91 d0 00 	lds	r29, 0x00D0
 3ec:	88 81       	ld	r24, Y
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	0e 94 a9 00 	call	0x152	; 0x152 <SetBit>
 3f6:	88 83       	st	Y, r24
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	08 95       	ret

00000400 <LCD_WriteDataEnd>:
void LCD_WriteDataEnd() {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 0);
 404:	c0 91 cf 00 	lds	r28, 0x00CF
 408:	d0 91 d0 00 	lds	r29, 0x00D0
 40c:	88 81       	ld	r24, Y
 40e:	64 e0       	ldi	r22, 0x04	; 4
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	0e 94 a9 00 	call	0x152	; 0x152 <SetBit>
 416:	88 83       	st	Y, r24
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <LCD_Cursor>:
void LCD_Cursor(unsigned char column ) {
	if ( column < 16 ) { // IEEE change this value to 16, was 8
 41e:	80 31       	cpi	r24, 0x10	; 16
 420:	20 f4       	brcc	.+8      	; 0x42a <LCD_Cursor+0xc>
	LCD_WriteCmdStart(0x80+column);
 422:	80 58       	subi	r24, 0x80	; 128
 424:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
 428:	08 95       	ret
}
else {
	LCD_WriteCmdStart(0xC0 +column); // IEEE change this value to 0xBF+column // was B8
 42a:	80 54       	subi	r24, 0x40	; 64
 42c:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
 430:	08 95       	ret

00000432 <LI_Tick>:
}
}
enum LI_States { LI_Init1, LI_Init2, LI_Init2_5, LI_Init3, LI_Init4, LI_Init5, LI_Init6,
		LI_WaitDisplayString, LI_Clr, LI_PositionCursor, LI_DisplayChar, LI_WaitGo0 } LI_State;
char LI_Tick(char LI_State) {
 432:	cf 93       	push	r28
	static unsigned char i;
	switch(LI_State) { // Transitions
 434:	86 30       	cpi	r24, 0x06	; 6
 436:	09 f4       	brne	.+2      	; 0x43a <LI_Tick+0x8>
 438:	42 c0       	rjmp	.+132    	; 0x4be <LI_Tick+0x8c>
 43a:	87 30       	cpi	r24, 0x07	; 7
 43c:	80 f4       	brcc	.+32     	; 0x45e <LI_Tick+0x2c>
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	49 f1       	breq	.+82     	; 0x494 <LI_Tick+0x62>
 442:	84 30       	cpi	r24, 0x04	; 4
 444:	30 f4       	brcc	.+12     	; 0x452 <LI_Tick+0x20>
 446:	88 23       	and	r24, r24
 448:	e1 f0       	breq	.+56     	; 0x482 <LI_Tick+0x50>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	09 f0       	breq	.+2      	; 0x450 <LI_Tick+0x1e>
 44e:	6d c0       	rjmp	.+218    	; 0x52a <LI_Tick+0xf8>
 450:	1b c0       	rjmp	.+54     	; 0x488 <LI_Tick+0x56>
 452:	84 30       	cpi	r24, 0x04	; 4
 454:	31 f1       	breq	.+76     	; 0x4a2 <LI_Tick+0x70>
 456:	85 30       	cpi	r24, 0x05	; 5
 458:	09 f0       	breq	.+2      	; 0x45c <LI_Tick+0x2a>
 45a:	67 c0       	rjmp	.+206    	; 0x52a <LI_Tick+0xf8>
 45c:	29 c0       	rjmp	.+82     	; 0x4b0 <LI_Tick+0x7e>
 45e:	89 30       	cpi	r24, 0x09	; 9
 460:	09 f4       	brne	.+2      	; 0x464 <LI_Tick+0x32>
 462:	41 c0       	rjmp	.+130    	; 0x4e6 <LI_Tick+0xb4>
 464:	8a 30       	cpi	r24, 0x0A	; 10
 466:	30 f4       	brcc	.+12     	; 0x474 <LI_Tick+0x42>
 468:	87 30       	cpi	r24, 0x07	; 7
 46a:	61 f1       	breq	.+88     	; 0x4c4 <LI_Tick+0x92>
 46c:	88 30       	cpi	r24, 0x08	; 8
 46e:	09 f0       	breq	.+2      	; 0x472 <LI_Tick+0x40>
 470:	5c c0       	rjmp	.+184    	; 0x52a <LI_Tick+0xf8>
 472:	34 c0       	rjmp	.+104    	; 0x4dc <LI_Tick+0xaa>
 474:	8a 30       	cpi	r24, 0x0A	; 10
 476:	09 f4       	brne	.+2      	; 0x47a <LI_Tick+0x48>
 478:	45 c0       	rjmp	.+138    	; 0x504 <LI_Tick+0xd2>
 47a:	8b 30       	cpi	r24, 0x0B	; 11
 47c:	09 f0       	breq	.+2      	; 0x480 <LI_Tick+0x4e>
 47e:	55 c0       	rjmp	.+170    	; 0x52a <LI_Tick+0xf8>
 480:	4f c0       	rjmp	.+158    	; 0x520 <LI_Tick+0xee>
	case -1:
		LI_State = LI_Init1;
		break;
	case LI_Init1:
		LI_State = LI_Init2;
		i=0;
 482:	10 92 ed 00 	sts	0x00ED, r1
		break;
 486:	5b c0       	rjmp	.+182    	; 0x53e <LI_Tick+0x10c>
	case LI_Init2:
		if (i<100) { // Wait 100 ms after power up
 488:	80 91 ed 00 	lds	r24, 0x00ED
 48c:	84 36       	cpi	r24, 0x64	; 100
 48e:	08 f0       	brcs	.+2      	; 0x492 <LI_Tick+0x60>
 490:	50 c0       	rjmp	.+160    	; 0x532 <LI_Tick+0x100>
 492:	55 c0       	rjmp	.+170    	; 0x53e <LI_Tick+0x10c>
			LI_State = LI_Init3;
		}
		break;
	case LI_Init3:
		LI_State = LI_Init4;
		LCD_WriteCmdEnd();
 494:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WriteCmdEnd>
		break;
	case LI_Init3: // in 4-bit mode, high-order nibble is given, then low order nibble. (ie. 0000, 01DS // 0000, 1DCB)
		LCD_WriteCmdStart(0x38); //function set - 0 0 1 DL -- N F * * // data length, number of lines, Font
		break;
	case LI_Init4:
		LCD_WriteCmdStart(0x06); //entry mode set - 0 0 0 0 -- 0 1 D S // direction, shift
 498:	86 e0       	ldi	r24, 0x06	; 6
 49a:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
		break;
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	4c c0       	rjmp	.+152    	; 0x53a <LI_Tick+0x108>
		LI_State = LI_Init4;
		LCD_WriteCmdEnd();
		break;
	case LI_Init4:
		LI_State = LI_Init5;
		LCD_WriteCmdEnd();
 4a2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WriteCmdEnd>
		break;
	case LI_Init4:
		LCD_WriteCmdStart(0x06); //entry mode set - 0 0 0 0 -- 0 1 D S // direction, shift
		break;
	case LI_Init5:
		LCD_WriteCmdStart(0x0F); //display on/off control - 0 0 0 0 -- 1 D C B // Display on, cursor, blink
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
		break;
 4ac:	85 e0       	ldi	r24, 0x05	; 5
 4ae:	45 c0       	rjmp	.+138    	; 0x53a <LI_Tick+0x108>
		LI_State = LI_Init5;
		LCD_WriteCmdEnd();
		break;
	case LI_Init5:
		LI_State = LI_Init6;
		LCD_WriteCmdEnd();
 4b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WriteCmdEnd>
		break;
	case LI_Init5:
		LCD_WriteCmdStart(0x0F); //display on/off control - 0 0 0 0 -- 1 D C B // Display on, cursor, blink
		break;
	case LI_Init6:
		LCD_WriteCmdStart(0x01); // Clear
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
		break;
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	3e c0       	rjmp	.+124    	; 0x53a <LI_Tick+0x108>
		LI_State = LI_Init6;
		LCD_WriteCmdEnd();
		break;
	case LI_Init6:
		LI_State = LI_WaitDisplayString;
		LCD_WriteCmdEnd();
 4be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WriteCmdEnd>
		break;
 4c2:	44 c0       	rjmp	.+136    	; 0x54c <LI_Tick+0x11a>
	//////////////////////////////////////////////
	case LI_WaitDisplayString:
		if (!LCD_go_g) {
 4c4:	80 91 e5 00 	lds	r24, 0x00E5
 4c8:	88 23       	and	r24, r24
 4ca:	09 f4       	brne	.+2      	; 0x4ce <LI_Tick+0x9c>
 4cc:	3f c0       	rjmp	.+126    	; 0x54c <LI_Tick+0x11a>
			LI_State = LI_WaitDisplayString;
		}
		else if (LCD_go_g) {
			LCD_rdy_g = 0;
 4ce:	10 92 e6 00 	sts	0x00E6, r1
	//////////////////////////////////////////////
	case LI_WaitDisplayString:
		LCD_rdy_g = 1;
		break;
	case LI_Clr:
		LCD_WriteCmdStart(0x01);
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
		break;
 4d8:	88 e0       	ldi	r24, 0x08	; 8
 4da:	2f c0       	rjmp	.+94     	; 0x53a <LI_Tick+0x108>
			LI_State = LI_Clr;
		}
		break;
	case LI_Clr:
		LI_State = LI_PositionCursor;
		LCD_WriteCmdEnd();
 4dc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WriteCmdEnd>
		i=0;
 4e0:	10 92 ed 00 	sts	0x00ED, r1
		break;
 4e4:	38 c0       	rjmp	.+112    	; 0x556 <LI_Tick+0x124>
	case LI_PositionCursor:
		LI_State = LI_DisplayChar;
		LCD_WriteCmdEnd();
 4e6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_WriteCmdEnd>
		break;
	case LI_PositionCursor:
		LCD_Cursor(i);
		break;
	case LI_DisplayChar:
		LCD_WriteDataStart(LCD_string_g[i]);
 4ea:	80 91 ed 00 	lds	r24, 0x00ED
 4ee:	e0 91 cb 00 	lds	r30, 0x00CB
 4f2:	f0 91 cc 00 	lds	r31, 0x00CC
 4f6:	e8 0f       	add	r30, r24
 4f8:	f1 1d       	adc	r31, r1
 4fa:	80 81       	ld	r24, Z
 4fc:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_WriteDataStart>
		break;
 500:	8a e0       	ldi	r24, 0x0A	; 10
 502:	1b c0       	rjmp	.+54     	; 0x53a <LI_Tick+0x108>
	case LI_PositionCursor:
		LI_State = LI_DisplayChar;
		LCD_WriteCmdEnd();
		break;
	case LI_DisplayChar:
		if (i<16) {
 504:	c0 91 ed 00 	lds	r28, 0x00ED
 508:	c0 31       	cpi	r28, 0x10	; 16
 50a:	30 f4       	brcc	.+12     	; 0x518 <LI_Tick+0xe6>
			LI_State = LI_PositionCursor;
			LCD_WriteDataEnd();
 50c:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteDataEnd>
			i++;
 510:	cf 5f       	subi	r28, 0xFF	; 255
 512:	c0 93 ed 00 	sts	0x00ED, r28
 516:	1f c0       	rjmp	.+62     	; 0x556 <LI_Tick+0x124>
		}
		else {
			LI_State = LI_WaitGo0;
			LCD_WriteDataEnd();
 518:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteDataEnd>
 51c:	8b e0       	ldi	r24, 0x0B	; 11
 51e:	0d c0       	rjmp	.+26     	; 0x53a <LI_Tick+0x108>
		}
		break;
	case LI_WaitGo0:
		if (!LCD_go_g) {
 520:	90 91 e5 00 	lds	r25, 0x00E5
 524:	99 23       	and	r25, r25
 526:	91 f0       	breq	.+36     	; 0x54c <LI_Tick+0x11a>
 528:	08 c0       	rjmp	.+16     	; 0x53a <LI_Tick+0x108>
		LI_State = LI_Init1;
	} // Transitions
	
	switch(LI_State) { // State actions
	case LI_Init1:
		LCD_rdy_g = 0;
 52a:	10 92 e6 00 	sts	0x00E6, r1
		else if (LCD_go_g) {
			LI_State = LI_WaitGo0;
		}
		break;
	default:
		LI_State = LI_Init1;
 52e:	80 e0       	ldi	r24, 0x00	; 0
	} // Transitions
	
	switch(LI_State) { // State actions
	case LI_Init1:
		LCD_rdy_g = 0;
		break;
 530:	04 c0       	rjmp	.+8      	; 0x53a <LI_Tick+0x108>
	case LI_Init2:
		i++; // Waiting after power up
		break;
	case LI_Init3: // in 4-bit mode, high-order nibble is given, then low order nibble. (ie. 0000, 01DS // 0000, 1DCB)
		LCD_WriteCmdStart(0x38); //function set - 0 0 1 DL -- N F * * // data length, number of lines, Font
 532:	88 e3       	ldi	r24, 0x38	; 56
 534:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_WriteCmdStart>
		break;
 538:	83 e0       	ldi	r24, 0x03	; 3
		break;
	default:
		break;
	} // State actions
	return LI_State;
}
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret
	switch(LI_State) { // State actions
	case LI_Init1:
		LCD_rdy_g = 0;
		break;
	case LI_Init2:
		i++; // Waiting after power up
 53e:	80 91 ed 00 	lds	r24, 0x00ED
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 ed 00 	sts	0x00ED, r24
		break;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	f7 cf       	rjmp	.-18     	; 0x53a <LI_Tick+0x108>
	case LI_Init6:
		LCD_WriteCmdStart(0x01); // Clear
		break;
	//////////////////////////////////////////////
	case LI_WaitDisplayString:
		LCD_rdy_g = 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	80 93 e6 00 	sts	0x00E6, r24
		break;
 552:	87 e0       	ldi	r24, 0x07	; 7
 554:	f2 cf       	rjmp	.-28     	; 0x53a <LI_Tick+0x108>
	case LI_Clr:
		LCD_WriteCmdStart(0x01);
		break;
	case LI_PositionCursor:
		LCD_Cursor(i);
 556:	80 91 ed 00 	lds	r24, 0x00ED
 55a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_Cursor>
		break;
 55e:	89 e0       	ldi	r24, 0x09	; 9
 560:	ec cf       	rjmp	.-40     	; 0x53a <LI_Tick+0x108>

00000562 <findGCD>:
		//adv = key;
	return state;
}

unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	f6 2f       	mov	r31, r22
 56c:	e7 2f       	mov	r30, r23
 56e:	02 2f       	mov	r16, r18
 570:	13 2f       	mov	r17, r19
 572:	d4 2f       	mov	r29, r20
 574:	c5 2f       	mov	r28, r21
 576:	04 c0       	rjmp	.+8      	; 0x580 <findGCD+0x1e>
	unsigned long int c;
	while(1){
		c = a%b;
	if(c==0){return b;}
	a = b;
	b = c;
 578:	0b 2f       	mov	r16, r27
 57a:	1a 2f       	mov	r17, r26
 57c:	d3 2f       	mov	r29, r19
 57e:	c2 2f       	mov	r28, r18

unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 580:	6f 2f       	mov	r22, r31
 582:	7e 2f       	mov	r23, r30
 584:	20 2f       	mov	r18, r16
 586:	31 2f       	mov	r19, r17
 588:	4d 2f       	mov	r20, r29
 58a:	5c 2f       	mov	r21, r28
 58c:	0e 94 83 03 	call	0x706	; 0x706 <__udivmodsi4>
 590:	ab 01       	movw	r20, r22
 592:	bc 01       	movw	r22, r24
 594:	f0 2f       	mov	r31, r16
 596:	e1 2f       	mov	r30, r17
 598:	8d 2f       	mov	r24, r29
 59a:	9c 2f       	mov	r25, r28
	if(c==0){return b;}
	a = b;
	b = c;
 59c:	b4 2f       	mov	r27, r20
 59e:	a5 2f       	mov	r26, r21
 5a0:	36 2f       	mov	r19, r22
 5a2:	27 2f       	mov	r18, r23
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
	if(c==0){return b;}
 5a4:	41 15       	cp	r20, r1
 5a6:	51 05       	cpc	r21, r1
 5a8:	61 05       	cpc	r22, r1
 5aa:	71 05       	cpc	r23, r1
 5ac:	29 f7       	brne	.-54     	; 0x578 <findGCD+0x16>
	a = b;
	b = c;
}
return 0;
}
 5ae:	60 2f       	mov	r22, r16
 5b0:	71 2f       	mov	r23, r17
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <taskInit>:
	unsigned long elapsedTime; //Time elapsed since last task tick
	uchar (*TickFct)(uchar); //Task tick function
} task;

void taskInit(task *t, unsigned long period, uchar(*fptr)(uchar))
{
 5bc:	fc 01       	movw	r30, r24
	t->state = -1;
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	80 83       	st	Z, r24
	t->period = period;
 5c2:	41 83       	std	Z+1, r20	; 0x01
 5c4:	52 83       	std	Z+2, r21	; 0x02
 5c6:	63 83       	std	Z+3, r22	; 0x03
 5c8:	74 83       	std	Z+4, r23	; 0x04
	t->elapsedTime = period;
 5ca:	45 83       	std	Z+5, r20	; 0x05
 5cc:	56 83       	std	Z+6, r21	; 0x06
 5ce:	67 83       	std	Z+7, r22	; 0x07
 5d0:	70 87       	std	Z+8, r23	; 0x08
	t->TickFct = fptr;
 5d2:	32 87       	std	Z+10, r19	; 0x0a
 5d4:	21 87       	std	Z+9, r18	; 0x09
}
 5d6:	08 95       	ret

000005d8 <main>:
task* tasks[] = {&task1,&task2,&task3,&task4};
const unsigned char numTasks = sizeof(tasks) / sizeof(task*);

int main(void)
{
	taskInit(tasks[0],1,keyTick);
 5d8:	80 91 71 00 	lds	r24, 0x0071
 5dc:	90 91 72 00 	lds	r25, 0x0072
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	50 e0       	ldi	r21, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	29 ea       	ldi	r18, 0xA9	; 169
 5ea:	31 e0       	ldi	r19, 0x01	; 1
 5ec:	0e 94 de 02 	call	0x5bc	; 0x5bc <taskInit>
	taskInit(tasks[1],1,LI_Tick);
 5f0:	80 91 73 00 	lds	r24, 0x0073
 5f4:	90 91 74 00 	lds	r25, 0x0074
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	29 e1       	ldi	r18, 0x19	; 25
 602:	32 e0       	ldi	r19, 0x02	; 2
 604:	0e 94 de 02 	call	0x5bc	; 0x5bc <taskInit>
	taskInit(tasks[3],1,LT_Tick);
 608:	80 91 77 00 	lds	r24, 0x0077
 60c:	90 91 78 00 	lds	r25, 0x0078
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	29 e4       	ldi	r18, 0x49	; 73
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	0e 94 de 02 	call	0x5bc	; 0x5bc <taskInit>
	taskInit(tasks[2],175,advanceTick);
 620:	80 91 75 00 	lds	r24, 0x0075
 624:	90 91 76 00 	lds	r25, 0x0076
 628:	4f ea       	ldi	r20, 0xAF	; 175
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	2d e7       	ldi	r18, 0x7D	; 125
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	0e 94 de 02 	call	0x5bc	; 0x5bc <taskInit>
	
	unsigned long period = 1;
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	87 bb       	out	0x17, r24	; 23
 63c:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 63e:	90 ef       	ldi	r25, 0xF0	; 240
 640:	94 bb       	out	0x14, r25	; 20
 642:	9f e0       	ldi	r25, 0x0F	; 15
 644:	95 bb       	out	0x15, r25	; 21
	
	DDRD = 0xFF; PORTD = 0x00;// Set port D to output
 646:	81 bb       	out	0x11, r24	; 17
 648:	12 ba       	out	0x12, r1	; 18
	DDRA = 0xFF; PORTA = 0x00;
 64a:	8a bb       	out	0x1a, r24	; 26
 64c:	1b ba       	out	0x1b, r1	; 27
	
	TimerSet(period);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 37 01 	call	0x26e	; 0x26e <TimerSet>
	TimerOn();
 65a:	0e 94 cb 00 	call	0x196	; 0x196 <TimerOn>
	
	while(1) {
		for(int i = 0; i < numTasks; ++i)
 65e:	c0 e0       	ldi	r28, 0x00	; 0
 660:	d0 e0       	ldi	r29, 0x00	; 0
 662:	cc 24       	eor	r12, r12
 664:	dd 24       	eor	r13, r13
		{
			if(tasks[i]->elapsedTime >= tasks[i]->period)
 666:	0f 2e       	mov	r0, r31
 668:	f1 e7       	ldi	r31, 0x71	; 113
 66a:	ef 2e       	mov	r14, r31
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	ff 2e       	mov	r15, r31
 670:	f0 2d       	mov	r31, r0
 672:	3d c0       	rjmp	.+122    	; 0x6ee <main+0x116>
 674:	fe 01       	movw	r30, r28
 676:	ee 0f       	add	r30, r30
 678:	ff 1f       	adc	r31, r31
 67a:	ee 0d       	add	r30, r14
 67c:	ff 1d       	adc	r31, r15
 67e:	00 81       	ld	r16, Z
 680:	11 81       	ldd	r17, Z+1	; 0x01
 682:	f8 01       	movw	r30, r16
 684:	85 81       	ldd	r24, Z+5	; 0x05
 686:	96 81       	ldd	r25, Z+6	; 0x06
 688:	a7 81       	ldd	r26, Z+7	; 0x07
 68a:	b0 85       	ldd	r27, Z+8	; 0x08
 68c:	41 81       	ldd	r20, Z+1	; 0x01
 68e:	52 81       	ldd	r21, Z+2	; 0x02
 690:	63 81       	ldd	r22, Z+3	; 0x03
 692:	74 81       	ldd	r23, Z+4	; 0x04
 694:	84 17       	cp	r24, r20
 696:	95 07       	cpc	r25, r21
 698:	a6 07       	cpc	r26, r22
 69a:	b7 07       	cpc	r27, r23
 69c:	a0 f0       	brcs	.+40     	; 0x6c6 <main+0xee>
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 69e:	01 84       	ldd	r0, Z+9	; 0x09
 6a0:	f2 85       	ldd	r31, Z+10	; 0x0a
 6a2:	e0 2d       	mov	r30, r0
 6a4:	d8 01       	movw	r26, r16
 6a6:	8c 91       	ld	r24, X
 6a8:	09 95       	icall
 6aa:	f8 01       	movw	r30, r16
 6ac:	80 83       	st	Z, r24
				tasks[i]->elapsedTime = 0;
 6ae:	fe 01       	movw	r30, r28
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	ee 0d       	add	r30, r14
 6b6:	ff 1d       	adc	r31, r15
 6b8:	01 90       	ld	r0, Z+
 6ba:	f0 81       	ld	r31, Z
 6bc:	e0 2d       	mov	r30, r0
 6be:	15 82       	std	Z+5, r1	; 0x05
 6c0:	16 82       	std	Z+6, r1	; 0x06
 6c2:	17 82       	std	Z+7, r1	; 0x07
 6c4:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += period;
 6c6:	fe 01       	movw	r30, r28
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	ee 0d       	add	r30, r14
 6ce:	ff 1d       	adc	r31, r15
 6d0:	01 90       	ld	r0, Z+
 6d2:	f0 81       	ld	r31, Z
 6d4:	e0 2d       	mov	r30, r0
 6d6:	85 81       	ldd	r24, Z+5	; 0x05
 6d8:	96 81       	ldd	r25, Z+6	; 0x06
 6da:	a7 81       	ldd	r26, Z+7	; 0x07
 6dc:	b0 85       	ldd	r27, Z+8	; 0x08
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	a1 1d       	adc	r26, r1
 6e2:	b1 1d       	adc	r27, r1
 6e4:	85 83       	std	Z+5, r24	; 0x05
 6e6:	96 83       	std	Z+6, r25	; 0x06
 6e8:	a7 83       	std	Z+7, r26	; 0x07
 6ea:	b0 87       	std	Z+8, r27	; 0x08
	
	TimerSet(period);
	TimerOn();
	
	while(1) {
		for(int i = 0; i < numTasks; ++i)
 6ec:	21 96       	adiw	r28, 0x01	; 1
 6ee:	c4 30       	cpi	r28, 0x04	; 4
 6f0:	d1 05       	cpc	r29, r1
 6f2:	0c f4       	brge	.+2      	; 0x6f6 <main+0x11e>
 6f4:	bf cf       	rjmp	.-130    	; 0x674 <main+0x9c>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += period;
		}
		while(!TimerFlag);
 6f6:	80 91 ec 00 	lds	r24, 0x00EC
 6fa:	88 23       	and	r24, r24
 6fc:	e1 f3       	breq	.-8      	; 0x6f6 <main+0x11e>
		TimerFlag = 0;
 6fe:	10 92 ec 00 	sts	0x00EC, r1
	
	TimerSet(period);
	TimerOn();
	
	while(1) {
		for(int i = 0; i < numTasks; ++i)
 702:	e6 01       	movw	r28, r12
			}
			tasks[i]->elapsedTime += period;
		}
		while(!TimerFlag);
		TimerFlag = 0;
	}
 704:	f4 cf       	rjmp	.-24     	; 0x6ee <main+0x116>

00000706 <__udivmodsi4>:
 706:	a1 e2       	ldi	r26, 0x21	; 33
 708:	1a 2e       	mov	r1, r26
 70a:	aa 1b       	sub	r26, r26
 70c:	bb 1b       	sub	r27, r27
 70e:	fd 01       	movw	r30, r26
 710:	0d c0       	rjmp	.+26     	; 0x72c <__udivmodsi4_ep>

00000712 <__udivmodsi4_loop>:
 712:	aa 1f       	adc	r26, r26
 714:	bb 1f       	adc	r27, r27
 716:	ee 1f       	adc	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	a2 17       	cp	r26, r18
 71c:	b3 07       	cpc	r27, r19
 71e:	e4 07       	cpc	r30, r20
 720:	f5 07       	cpc	r31, r21
 722:	20 f0       	brcs	.+8      	; 0x72c <__udivmodsi4_ep>
 724:	a2 1b       	sub	r26, r18
 726:	b3 0b       	sbc	r27, r19
 728:	e4 0b       	sbc	r30, r20
 72a:	f5 0b       	sbc	r31, r21

0000072c <__udivmodsi4_ep>:
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	1a 94       	dec	r1
 736:	69 f7       	brne	.-38     	; 0x712 <__udivmodsi4_loop>
 738:	60 95       	com	r22
 73a:	70 95       	com	r23
 73c:	80 95       	com	r24
 73e:	90 95       	com	r25
 740:	9b 01       	movw	r18, r22
 742:	ac 01       	movw	r20, r24
 744:	bd 01       	movw	r22, r26
 746:	cf 01       	movw	r24, r30
 748:	08 95       	ret

0000074a <_exit>:
 74a:	f8 94       	cli

0000074c <__stop_program>:
 74c:	ff cf       	rjmp	.-2      	; 0x74c <__stop_program>
