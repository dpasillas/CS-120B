
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001da  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000488  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000164  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000128  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8a:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Setup>:
#include <util/delay.h>

void SPI_Setup()
{
	/* Set MOSI and SCK output, all others input */
	DDRB = 0xFF;//(1<<5)|(1<<7);
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	/* Enable SPI, Master, 2x clock rate, Data order*/
	SPCR = (1<<SPE) | (1<<MSTR) | (1 << SPI2X) /*|(1<<SPR0)*/ /*| (1 << DORD)*/;
  96:	81 e5       	ldi	r24, 0x51	; 81
  98:	8d b9       	out	0x0d, r24	; 13
}
  9a:	08 95       	ret

0000009c <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  9c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  9e:	77 9b       	sbis	0x0e, 7	; 14
  a0:	fe cf       	rjmp	.-4      	; 0x9e <SPI_MasterTransmit+0x2>
}
  a2:	08 95       	ret

000000a4 <LED_RowTransmit>:

void LED_RowTransmit(uchar r, uchar g, uchar b, uchar com)
{
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	c8 2f       	mov	r28, r24
  ac:	16 2f       	mov	r17, r22
  ae:	d4 2f       	mov	r29, r20
  b0:	82 2f       	mov	r24, r18
	PORTB &= ~2; //Master Reset on
  b2:	c1 98       	cbi	0x18, 1	; 24
	PORTB |= 2;
  b4:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |= 1;  //MR off, Latch on
  b6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~1;  //Latch off
  b8:	c0 98       	cbi	0x18, 0	; 24
	SPI_MasterTransmit(com);
  ba:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_MasterTransmit>
	SPI_MasterTransmit(~g);
  be:	81 2f       	mov	r24, r17
  c0:	80 95       	com	r24
  c2:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_MasterTransmit>
	SPI_MasterTransmit(~b);
  c6:	8d 2f       	mov	r24, r29
  c8:	80 95       	com	r24
  ca:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_MasterTransmit>
	PORTA = ~r;
  ce:	c0 95       	com	r28
  d0:	cb bb       	out	0x1b, r28	; 27
	PORTB |= 1;
  d2:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~1;
  d4:	c0 98       	cbi	0x18, 0	; 24
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <ADC_Setup>:

void ADC_Setup()
{
	SFIOR |= /*(1 << PUD) |*/ (1 << ACME); //Pull-up disable, Analog Converter Multiplexer enable
  de:	80 b7       	in	r24, 0x30	; 48
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	80 bf       	out	0x30, r24	; 48
	
	ADMUX = 0;//(1 << REFS0);// | (1 << ADLAR);
  e4:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) /*| (1 << ADPS0)*/; //enable, prescalar 64. 8,000,000 / 64 = 125,000
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	86 68       	ori	r24, 0x86	; 134
  ea:	86 b9       	out	0x06, r24	; 6
}
  ec:	08 95       	ret

000000ee <analogRead>:

unsigned short analogRead(unsigned char channel)
{
	unsigned char chan = (channel & 0b00000111);
	ADMUX = (ADMUX & ~7) | chan;
  ee:	97 b1       	in	r25, 0x07	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) /*| (1 << ADPS0)*/; //enable, prescalar 64. 8,000,000 / 64 = 125,000
}

unsigned short analogRead(unsigned char channel)
{
	unsigned char chan = (channel & 0b00000111);
  f0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & ~7) | chan;
  f2:	98 7f       	andi	r25, 0xF8	; 248
  f4:	98 2b       	or	r25, r24
  f6:	97 b9       	out	0x07, r25	; 7
	ADCSRA &= ~(1 << ADEN);
  f8:	37 98       	cbi	0x06, 7	; 6
	ADCSRA |= (1<<ADEN);
  fa:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= 1 << ADSC; // start analog read
  fc:	36 9a       	sbi	0x06, 6	; 6
	
	//224
	//141
	while(!(ADCSRA & (1<<ADIF))); //poll until ready
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <analogRead+0x10>
	//DDRA |= chan;
	return ADC;
 102:	84 b1       	in	r24, 0x04	; 4
 104:	95 b1       	in	r25, 0x05	; 5
}
 106:	08 95       	ret

00000108 <main>:

int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <main+0x6>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0x00;
 112:	1a ba       	out	0x1a, r1	; 26
 114:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xFF; PORTB = 0x00;
 116:	1f ef       	ldi	r17, 0xFF	; 255
 118:	17 bb       	out	0x17, r17	; 23
 11a:	18 ba       	out	0x18, r1	; 24
	DDRC = 0x00; PORTC = 0xFF;
 11c:	14 ba       	out	0x14, r1	; 20
 11e:	15 bb       	out	0x15, r17	; 21
	SPI_Setup();
 120:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Setup>
	ADC_Setup();
 124:	0e 94 6f 00 	call	0xde	; 0xde <ADC_Setup>
	volatile unsigned short tmp = 0;
 128:	1a 82       	std	Y+2, r1	; 0x02
 12a:	19 82       	std	Y+1, r1	; 0x01
	unsigned short tmp2 = 0;
	unsigned short diff = 0, diff2 = 0;
	unsigned char index = 0;
	unsigned short diffs[8][8] = {{0}};
	unsigned short diffs2[8][8] = {{0}};
	tmp = analogRead(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(1);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(2);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(3);
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(4);
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 15a:	9a 83       	std	Y+2, r25	; 0x02
 15c:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(5);
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(6);
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
	tmp = analogRead(7);
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
	
	DDRA = 0xFF;
 17c:	1a bb       	out	0x1a, r17	; 26
	PORTA = 0xFF;
 17e:	1b bb       	out	0x1b, r17	; 27
	
	DDRA = 0x00;
 180:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 182:	1b ba       	out	0x1b, r1	; 27
	LED_RowTransmit(0,4,4,4); //light
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	44 e0       	ldi	r20, 0x04	; 4
 18a:	24 e0       	ldi	r18, 0x04	; 4
 18c:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_RowTransmit>
	tmp = analogRead(2);
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	89 83       	std	Y+1, r24	; 0x01
	LED_RowTransmit(0,4,4,4); //light
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	44 e0       	ldi	r20, 0x04	; 4
 1a0:	24 e0       	ldi	r18, 0x04	; 4
 1a2:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_RowTransmit>
	tmp = analogRead(2);
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		DDRA = 0;
 1b0:	1a ba       	out	0x1a, r1	; 26
		PORTA = 0;
 1b2:	1b ba       	out	0x1b, r1	; 27
		tmp = analogRead(0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 77 00 	call	0xee	; 0xee <analogRead>
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
		PORTA = 0xFF;
 1be:	1b bb       	out	0x1b, r17	; 27
		DDRA = 0xFF;
 1c0:	1a bb       	out	0x1a, r17	; 26
		LED_RowTransmit(0,tmp >> 8, tmp, 0x80);
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	49 81       	ldd	r20, Y+1	; 0x01
 1c8:	5a 81       	ldd	r21, Y+2	; 0x02
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	69 2f       	mov	r22, r25
 1ce:	20 e8       	ldi	r18, 0x80	; 128
 1d0:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_RowTransmit>
 1d4:	ed cf       	rjmp	.-38     	; 0x1b0 <main+0xa8>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
