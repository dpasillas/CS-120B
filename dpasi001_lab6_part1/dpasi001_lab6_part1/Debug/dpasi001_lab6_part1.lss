
dpasi001_lab6_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800064  00800064  000002ac  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000047a  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000142  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c7  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000125  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000014f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8a:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerOn>:
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
	// AVR timer/counter controller register TCCR0
	TCCR0 = 0x0B;	// bit3bit6=10: CTC mode (clear timer on compare)
  92:	8b e0       	ldi	r24, 0x0B	; 11
  94:	83 bf       	out	0x33, r24	; 51
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT0 register will count at 125,000 ticks/s

	// AVR output compare register OCR0.
	OCR0 = 125;	// Timer interrupt will be generated when TCNT0==OCR0
  96:	8d e7       	ldi	r24, 0x7D	; 125
  98:	8c bf       	out	0x3c, r24	; 60
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT0 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK = 0x02; // bit1: OCIE0 -- enables compare match interrupt
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0=0;
  9e:	12 be       	out	0x32, r1	; 50

	_avr_timer_cntcurr = _avr_timer_M;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	a0 91 62 00 	lds	r26, 0x0062
  ac:	b0 91 63 00 	lds	r27, 0x0063
  b0:	80 93 64 00 	sts	0x0064, r24
  b4:	90 93 65 00 	sts	0x0065, r25
  b8:	a0 93 66 00 	sts	0x0066, r26
  bc:	b0 93 67 00 	sts	0x0067, r27
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
}
  c6:	08 95       	ret

000000c8 <TimerOff>:

void TimerOff() {
	TCCR0 = 0x00; // bit2bit1bit0=000: timer off
  c8:	13 be       	out	0x33, r1	; 51
}
  ca:	08 95       	ret

000000cc <TimerISR>:

void TimerISR() {
	TimerFlag = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 68 00 	sts	0x0068, r24
}
  d2:	08 95       	ret

000000d4 <__vector_10>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect) {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
  f6:	80 91 64 00 	lds	r24, 0x0064
  fa:	90 91 65 00 	lds	r25, 0x0065
  fe:	a0 91 66 00 	lds	r26, 0x0066
 102:	b0 91 67 00 	lds	r27, 0x0067
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	a1 09       	sbc	r26, r1
 10a:	b1 09       	sbc	r27, r1
 10c:	80 93 64 00 	sts	0x0064, r24
 110:	90 93 65 00 	sts	0x0065, r25
 114:	a0 93 66 00 	sts	0x0066, r26
 118:	b0 93 67 00 	sts	0x0067, r27
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	a1 05       	cpc	r26, r1
 120:	b1 05       	cpc	r27, r1
 122:	91 f4       	brne	.+36     	; 0x148 <__vector_10+0x74>
	TimerISR(); // Call the ISR that the user uses
 124:	0e 94 66 00 	call	0xcc	; 0xcc <TimerISR>
	_avr_timer_cntcurr = _avr_timer_M;
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	90 91 61 00 	lds	r25, 0x0061
 130:	a0 91 62 00 	lds	r26, 0x0062
 134:	b0 91 63 00 	lds	r27, 0x0063
 138:	80 93 64 00 	sts	0x0064, r24
 13c:	90 93 65 00 	sts	0x0065, r25
 140:	a0 93 66 00 	sts	0x0066, r26
 144:	b0 93 67 00 	sts	0x0067, r27
}
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
 16e:	80 93 60 00 	sts	0x0060, r24
 172:	90 93 61 00 	sts	0x0061, r25
 176:	a0 93 62 00 	sts	0x0062, r26
 17a:	b0 93 63 00 	sts	0x0063, r27
	_avr_timer_cntcurr = _avr_timer_M;
 17e:	80 93 64 00 	sts	0x0064, r24
 182:	90 93 65 00 	sts	0x0065, r25
 186:	a0 93 66 00 	sts	0x0066, r26
 18a:	b0 93 67 00 	sts	0x0067, r27
}
 18e:	08 95       	ret

00000190 <SM_Tick>:
unsigned char led_states;
	
SM_Tick()
{
	//transitions
	switch(state)
 190:	80 91 6a 00 	lds	r24, 0x006A
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	59 f0       	breq	.+22     	; 0x1ae <SM_Tick+0x1e>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <SM_Tick+0x16>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	69 f0       	breq	.+26     	; 0x1ba <SM_Tick+0x2a>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	b1 f4       	brne	.+44     	; 0x1d0 <SM_Tick+0x40>
 1a4:	11 c0       	rjmp	.+34     	; 0x1c8 <SM_Tick+0x38>
	{
	case INIT:
	    state = S0;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 6a 00 	sts	0x006A, r24
		break;
 1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <SM_Tick+0x46>
	case S0:
	    state = S1;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	80 93 6a 00 	sts	0x006A, r24
	{
	case S0:
	    led_states = 0x01;
		break;
	case S1:
	    led_states = 0x02;
 1b4:	80 93 69 00 	sts	0x0069, r24
		break;
 1b8:	11 c0       	rjmp	.+34     	; 0x1dc <SM_Tick+0x4c>
		break;
	case S0:
	    state = S1;
		break;
	case S1:
	    state = S2;
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	80 93 6a 00 	sts	0x006A, r24
		break;
	case S1:
	    led_states = 0x02;
		break;
	case S2:
	    led_states = 0x04;
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	80 93 69 00 	sts	0x0069, r24
		break;
 1c6:	0a c0       	rjmp	.+20     	; 0x1dc <SM_Tick+0x4c>
		break;
	case S1:
	    state = S2;
		break;
	case S2:
	    state = S0;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 6a 00 	sts	0x006A, r24
		break;
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <SM_Tick+0x46>
	default:
	    state = S0;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 6a 00 	sts	0x006A, r24
	
	//
	switch(state)
	{
	case S0:
	    led_states = 0x01;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 69 00 	sts	0x0069, r24
	    led_states = 0x04;
		break;
    default:
	    break; //this line should never be reached!
	}
	PORTB = led_states;
 1dc:	80 91 69 00 	lds	r24, 0x0069
 1e0:	88 bb       	out	0x18, r24	; 24
}
 1e2:	08 95       	ret

000001e4 <main>:

void main()
{
	DDRB = 0xFF; // Set port B to output
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00; // Init port B to 0s
 1e8:	18 ba       	out	0x18, r1	; 24
	TimerSet(1000);
 1ea:	68 ee       	ldi	r22, 0xE8	; 232
 1ec:	73 e0       	ldi	r23, 0x03	; 3
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 b5 00 	call	0x16a	; 0x16a <TimerSet>
	TimerOn();
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <TimerOn>
	unsigned char B = 0x00;
	
	state = INIT;
 1fa:	10 92 6a 00 	sts	0x006A, r1
	while(1) {
		// User code
		SM_Tick();
 1fe:	0e 94 c8 00 	call	0x190	; 0x190 <SM_Tick>
		//PORTB = ~PORTB;	// Toggle PORTB; Temporary, bad programming style
		while (!TimerFlag);	// Wait 1 sec
 202:	80 91 68 00 	lds	r24, 0x0068
 206:	88 23       	and	r24, r24
 208:	e1 f3       	breq	.-8      	; 0x202 <main+0x1e>
		TimerFlag = 0;
 20a:	10 92 68 00 	sts	0x0068, r1
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 20e:	f7 cf       	rjmp	.-18     	; 0x1fe <main+0x1a>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
