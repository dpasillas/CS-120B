
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002f0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000158  00000000  00000000  00000ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000962  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000240  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000659  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012f  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000203  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  8a:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetBit>:
#include <avr/io.h>


// Bit-access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  92:	44 23       	and	r20, r20
  94:	51 f0       	breq	.+20     	; 0xaa <SetBit+0x18>
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	9a 01       	movw	r18, r20
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <SetBit+0x10>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <SetBit+0xc>
  a6:	82 2b       	or	r24, r18
  a8:	08 95       	ret
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <SetBit+0x24>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <SetBit+0x20>
  ba:	ba 01       	movw	r22, r20
  bc:	60 95       	com	r22
  be:	86 23       	and	r24, r22
}
  c0:	08 95       	ret

000000c2 <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GetBit+0x8>
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GetBit+0x4>
}
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	08 95       	ret

000000d2 <Write7Seg>:
										   0x77, 0x4C, //0111 0111, 0100 1100, //6, 7
										   0x7F, 0x6F, //0111 1111, 0111 1111, //8, 9
										   0x5F, 0x73, //0101 1111, 0111 0011, //A, B
										   0x36, 0x79, //0111 0110, 0111 1001, //C, D
										   0x37, 0x17};//0011 0111, 0001 0111};//E, F
    PORTC = ~Seg7[x%16];
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ef 70       	andi	r30, 0x0F	; 15
  d8:	f0 70       	andi	r31, 0x00	; 0
  da:	e0 5a       	subi	r30, 0xA0	; 160
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	80 81       	ld	r24, Z
  e0:	80 95       	com	r24
  e2:	85 bb       	out	0x15, r24	; 21
}
  e4:	08 95       	ret

000000e6 <main>:
int rand(void);

int main(void)
{
	unsigned char cnt=0;
	DDRA = 0x00; PORTA = 0xFF; // Config port A as inputs, init 1s
  e6:	1a ba       	out	0x1a, r1	; 26
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0xFF; PORTC = 0x00; // Config port C as outputs, init 0s
  ec:	84 bb       	out	0x14, r24	; 20
  ee:	15 ba       	out	0x15, r1	; 21
	
	while(1)
	{
		if (GetBit(PINA, 0)==0) 
		{ // Button pressed
		    cnt = rand() % 10; // cnt is rand num from 0-9
  f0:	0a e0       	ldi	r16, 0x0A	; 10
  f2:	10 e0       	ldi	r17, 0x00	; 0
		    Write7Seg(cnt);
	    }
		else if(PINC == 0)
		{
			PORTC = ~0;
  f4:	cf ef       	ldi	r28, 0xFF	; 255
	DDRA = 0x00; PORTA = 0xFF; // Config port A as inputs, init 1s
	DDRC = 0xFF; PORTC = 0x00; // Config port C as outputs, init 0s
	
	while(1)
	{
		if (GetBit(PINA, 0)==0) 
  f6:	89 b3       	in	r24, 0x19	; 25
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
  fe:	88 23       	and	r24, r24
 100:	41 f4       	brne	.+16     	; 0x112 <main+0x2c>
		{ // Button pressed
		    cnt = rand() % 10; // cnt is rand num from 0-9
 102:	0e 94 0a 01 	call	0x214	; 0x214 <rand>
 106:	b8 01       	movw	r22, r16
 108:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
		    Write7Seg(cnt);
 10c:	0e 94 69 00 	call	0xd2	; 0xd2 <Write7Seg>
 110:	f2 cf       	rjmp	.-28     	; 0xf6 <main+0x10>
	    }
		else if(PINC == 0)
 112:	83 b3       	in	r24, 0x13	; 19
 114:	88 23       	and	r24, r24
 116:	79 f7       	brne	.-34     	; 0xf6 <main+0x10>
		{
			PORTC = ~0;
 118:	c5 bb       	out	0x15, r28	; 21
 11a:	ed cf       	rjmp	.-38     	; 0xf6 <main+0x10>

0000011c <__divmodhi4>:
 11c:	97 fb       	bst	r25, 7
 11e:	09 2e       	mov	r0, r25
 120:	07 26       	eor	r0, r23
 122:	0a d0       	rcall	.+20     	; 0x138 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	04 d0       	rcall	.+8      	; 0x130 <__divmodhi4_neg2>
 128:	0c d0       	rcall	.+24     	; 0x142 <__udivmodhi4>
 12a:	06 d0       	rcall	.+12     	; 0x138 <__divmodhi4_neg1>
 12c:	00 20       	and	r0, r0
 12e:	1a f4       	brpl	.+6      	; 0x136 <__divmodhi4_exit>

00000130 <__divmodhi4_neg2>:
 130:	70 95       	com	r23
 132:	61 95       	neg	r22
 134:	7f 4f       	sbci	r23, 0xFF	; 255

00000136 <__divmodhi4_exit>:
 136:	08 95       	ret

00000138 <__divmodhi4_neg1>:
 138:	f6 f7       	brtc	.-4      	; 0x136 <__divmodhi4_exit>
 13a:	90 95       	com	r25
 13c:	81 95       	neg	r24
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	08 95       	ret

00000142 <__udivmodhi4>:
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	51 e1       	ldi	r21, 0x11	; 17
 148:	07 c0       	rjmp	.+14     	; 0x158 <__udivmodhi4_ep>

0000014a <__udivmodhi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a6 17       	cp	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	10 f0       	brcs	.+4      	; 0x158 <__udivmodhi4_ep>
 154:	a6 1b       	sub	r26, r22
 156:	b7 0b       	sbc	r27, r23

00000158 <__udivmodhi4_ep>:
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	5a 95       	dec	r21
 15e:	a9 f7       	brne	.-22     	; 0x14a <__udivmodhi4_loop>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	08 95       	ret

0000016a <do_rand>:
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
 180:	88 81       	ld	r24, Y
 182:	99 81       	ldd	r25, Y+1	; 0x01
 184:	aa 81       	ldd	r26, Y+2	; 0x02
 186:	bb 81       	ldd	r27, Y+3	; 0x03
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	a1 05       	cpc	r26, r1
 18c:	b1 05       	cpc	r27, r1
 18e:	21 f4       	brne	.+8      	; 0x198 <do_rand+0x2e>
 190:	84 e2       	ldi	r24, 0x24	; 36
 192:	99 ed       	ldi	r25, 0xD9	; 217
 194:	ab e5       	ldi	r26, 0x5B	; 91
 196:	b7 e0       	ldi	r27, 0x07	; 7
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	2d e1       	ldi	r18, 0x1D	; 29
 19e:	33 ef       	ldi	r19, 0xF3	; 243
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	0e 94 39 01 	call	0x272	; 0x272 <__divmodsi4>
 1a8:	49 01       	movw	r8, r18
 1aa:	5a 01       	movw	r10, r20
 1ac:	27 ea       	ldi	r18, 0xA7	; 167
 1ae:	31 e4       	ldi	r19, 0x41	; 65
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	0e 94 1a 01 	call	0x234	; 0x234 <__mulsi3>
 1b8:	6b 01       	movw	r12, r22
 1ba:	7c 01       	movw	r14, r24
 1bc:	c5 01       	movw	r24, r10
 1be:	b4 01       	movw	r22, r8
 1c0:	2c ee       	ldi	r18, 0xEC	; 236
 1c2:	34 ef       	ldi	r19, 0xF4	; 244
 1c4:	4f ef       	ldi	r20, 0xFF	; 255
 1c6:	5f ef       	ldi	r21, 0xFF	; 255
 1c8:	0e 94 1a 01 	call	0x234	; 0x234 <__mulsi3>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	c8 0e       	add	r12, r24
 1d2:	d9 1e       	adc	r13, r25
 1d4:	ea 1e       	adc	r14, r26
 1d6:	fb 1e       	adc	r15, r27
 1d8:	f7 fe       	sbrs	r15, 7
 1da:	08 c0       	rjmp	.+16     	; 0x1ec <do_rand+0x82>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	af ef       	ldi	r26, 0xFF	; 255
 1e2:	bf e7       	ldi	r27, 0x7F	; 127
 1e4:	c8 0e       	add	r12, r24
 1e6:	d9 1e       	adc	r13, r25
 1e8:	ea 1e       	adc	r14, r26
 1ea:	fb 1e       	adc	r15, r27
 1ec:	c8 82       	st	Y, r12
 1ee:	d9 82       	std	Y+1, r13	; 0x01
 1f0:	ea 82       	std	Y+2, r14	; 0x02
 1f2:	fb 82       	std	Y+3, r15	; 0x03
 1f4:	c6 01       	movw	r24, r12
 1f6:	9f 77       	andi	r25, 0x7F	; 127
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	bf 90       	pop	r11
 206:	af 90       	pop	r10
 208:	9f 90       	pop	r9
 20a:	8f 90       	pop	r8
 20c:	08 95       	ret

0000020e <rand_r>:
 20e:	0e 94 b5 00 	call	0x16a	; 0x16a <do_rand>
 212:	08 95       	ret

00000214 <rand>:
 214:	80 e7       	ldi	r24, 0x70	; 112
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 b5 00 	call	0x16a	; 0x16a <do_rand>
 21c:	08 95       	ret

0000021e <srand>:
 21e:	a0 e0       	ldi	r26, 0x00	; 0
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	80 93 70 00 	sts	0x0070, r24
 226:	90 93 71 00 	sts	0x0071, r25
 22a:	a0 93 72 00 	sts	0x0072, r26
 22e:	b0 93 73 00 	sts	0x0073, r27
 232:	08 95       	ret

00000234 <__mulsi3>:
 234:	62 9f       	mul	r22, r18
 236:	d0 01       	movw	r26, r0
 238:	73 9f       	mul	r23, r19
 23a:	f0 01       	movw	r30, r0
 23c:	82 9f       	mul	r24, r18
 23e:	e0 0d       	add	r30, r0
 240:	f1 1d       	adc	r31, r1
 242:	64 9f       	mul	r22, r20
 244:	e0 0d       	add	r30, r0
 246:	f1 1d       	adc	r31, r1
 248:	92 9f       	mul	r25, r18
 24a:	f0 0d       	add	r31, r0
 24c:	83 9f       	mul	r24, r19
 24e:	f0 0d       	add	r31, r0
 250:	74 9f       	mul	r23, r20
 252:	f0 0d       	add	r31, r0
 254:	65 9f       	mul	r22, r21
 256:	f0 0d       	add	r31, r0
 258:	99 27       	eor	r25, r25
 25a:	72 9f       	mul	r23, r18
 25c:	b0 0d       	add	r27, r0
 25e:	e1 1d       	adc	r30, r1
 260:	f9 1f       	adc	r31, r25
 262:	63 9f       	mul	r22, r19
 264:	b0 0d       	add	r27, r0
 266:	e1 1d       	adc	r30, r1
 268:	f9 1f       	adc	r31, r25
 26a:	bd 01       	movw	r22, r26
 26c:	cf 01       	movw	r24, r30
 26e:	11 24       	eor	r1, r1
 270:	08 95       	ret

00000272 <__divmodsi4>:
 272:	97 fb       	bst	r25, 7
 274:	09 2e       	mov	r0, r25
 276:	05 26       	eor	r0, r21
 278:	0e d0       	rcall	.+28     	; 0x296 <__divmodsi4_neg1>
 27a:	57 fd       	sbrc	r21, 7
 27c:	04 d0       	rcall	.+8      	; 0x286 <__divmodsi4_neg2>
 27e:	14 d0       	rcall	.+40     	; 0x2a8 <__udivmodsi4>
 280:	0a d0       	rcall	.+20     	; 0x296 <__divmodsi4_neg1>
 282:	00 1c       	adc	r0, r0
 284:	38 f4       	brcc	.+14     	; 0x294 <__divmodsi4_exit>

00000286 <__divmodsi4_neg2>:
 286:	50 95       	com	r21
 288:	40 95       	com	r20
 28a:	30 95       	com	r19
 28c:	21 95       	neg	r18
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	4f 4f       	sbci	r20, 0xFF	; 255
 292:	5f 4f       	sbci	r21, 0xFF	; 255

00000294 <__divmodsi4_exit>:
 294:	08 95       	ret

00000296 <__divmodsi4_neg1>:
 296:	f6 f7       	brtc	.-4      	; 0x294 <__divmodsi4_exit>
 298:	90 95       	com	r25
 29a:	80 95       	com	r24
 29c:	70 95       	com	r23
 29e:	61 95       	neg	r22
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	8f 4f       	sbci	r24, 0xFF	; 255
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	08 95       	ret

000002a8 <__udivmodsi4>:
 2a8:	a1 e2       	ldi	r26, 0x21	; 33
 2aa:	1a 2e       	mov	r1, r26
 2ac:	aa 1b       	sub	r26, r26
 2ae:	bb 1b       	sub	r27, r27
 2b0:	fd 01       	movw	r30, r26
 2b2:	0d c0       	rjmp	.+26     	; 0x2ce <__udivmodsi4_ep>

000002b4 <__udivmodsi4_loop>:
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	ee 1f       	adc	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	a2 17       	cp	r26, r18
 2be:	b3 07       	cpc	r27, r19
 2c0:	e4 07       	cpc	r30, r20
 2c2:	f5 07       	cpc	r31, r21
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <__udivmodsi4_ep>
 2c6:	a2 1b       	sub	r26, r18
 2c8:	b3 0b       	sbc	r27, r19
 2ca:	e4 0b       	sbc	r30, r20
 2cc:	f5 0b       	sbc	r31, r21

000002ce <__udivmodsi4_ep>:
 2ce:	66 1f       	adc	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	1a 94       	dec	r1
 2d8:	69 f7       	brne	.-38     	; 0x2b4 <__udivmodsi4_loop>
 2da:	60 95       	com	r22
 2dc:	70 95       	com	r23
 2de:	80 95       	com	r24
 2e0:	90 95       	com	r25
 2e2:	9b 01       	movw	r18, r22
 2e4:	ac 01       	movw	r20, r24
 2e6:	bd 01       	movw	r22, r26
 2e8:	cf 01       	movw	r24, r30
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
