
dpasi001_labx_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800080  00800080  00000804  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000158  00000000  00000000  00000f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0e  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000359  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000402  00000000  00000000  00002daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000031b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 02 	call	0x544	; 0x544 <main>
  8a:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetBit>:
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
  92:	44 23       	and	r20, r20
  94:	51 f0       	breq	.+20     	; 0xaa <SetBit+0x18>
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	9a 01       	movw	r18, r20
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <SetBit+0x10>
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <SetBit+0xc>
  a6:	82 2b       	or	r24, r18
  a8:	08 95       	ret
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <SetBit+0x24>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <SetBit+0x20>
  ba:	ba 01       	movw	r22, r20
  bc:	60 95       	com	r22
  be:	86 23       	and	r24, r22
}
  c0:	08 95       	ret

000000c2 <GetBit>:
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	a9 01       	movw	r20, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <GetBit+0xc>
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <GetBit+0x8>
}
  d2:	84 23       	and	r24, r20
  d4:	08 95       	ret

000000d6 <TimerSet>:
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
  d6:	dc 01       	movw	r26, r24
  d8:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
  da:	80 93 77 00 	sts	0x0077, r24
  de:	90 93 78 00 	sts	0x0078, r25
  e2:	a0 93 79 00 	sts	0x0079, r26
  e6:	b0 93 7a 00 	sts	0x007A, r27
	_avr_timer_cntcurr = _avr_timer_M;
  ea:	80 93 82 00 	sts	0x0082, r24
  ee:	90 93 83 00 	sts	0x0083, r25
  f2:	a0 93 84 00 	sts	0x0084, r26
  f6:	b0 93 85 00 	sts	0x0085, r27
}
  fa:	08 95       	ret

000000fc <TimerOn>:

void TimerOn() {
	// AVR timer/counter controller register TCCR0
	TCCR0 	= 0x0B;	// bit3bit6=10: CTC mode (clear timer on compare)
  fc:	8b e0       	ldi	r24, 0x0B	; 11
  fe:	83 bf       	out	0x33, r24	; 51
					// 00001011: 0x0B
					// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT0 register will count at 125,000 ticks/s

	// AVR output compare register OCR0.
	OCR0 	= 125;	// Timer interrupt will be generated when TCNT0==OCR0
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	8c bf       	out	0x3c, r24	; 60
					// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
					// So when TCNT0 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

	TIMSK 	= 0x02; // bit1: OCIE0 -- enables compare match interrupt
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0 = 0;
 108:	12 be       	out	0x32, r1	; 50

	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
 10a:	80 91 77 00 	lds	r24, 0x0077
 10e:	90 91 78 00 	lds	r25, 0x0078
 112:	a0 91 79 00 	lds	r26, 0x0079
 116:	b0 91 7a 00 	lds	r27, 0x007A
 11a:	80 93 82 00 	sts	0x0082, r24
 11e:	90 93 83 00 	sts	0x0083, r25
 122:	a0 93 84 00 	sts	0x0084, r26
 126:	b0 93 85 00 	sts	0x0085, r27

	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
}
 130:	08 95       	ret

00000132 <TimerOff>:

void TimerOff() {
	TCCR0 	= 0x00; // bit2bit1bit0=000: timer off
 132:	13 be       	out	0x33, r1	; 51
}
 134:	08 95       	ret

00000136 <TimerISR>:

void TimerISR() {
	TimerFlag = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 86 00 	sts	0x0086, r24
}
 13c:	08 95       	ret

0000013e <__vector_10>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 160:	80 91 82 00 	lds	r24, 0x0082
 164:	90 91 83 00 	lds	r25, 0x0083
 168:	a0 91 84 00 	lds	r26, 0x0084
 16c:	b0 91 85 00 	lds	r27, 0x0085
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	a1 09       	sbc	r26, r1
 174:	b1 09       	sbc	r27, r1
 176:	80 93 82 00 	sts	0x0082, r24
 17a:	90 93 83 00 	sts	0x0083, r25
 17e:	a0 93 84 00 	sts	0x0084, r26
 182:	b0 93 85 00 	sts	0x0085, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	a1 05       	cpc	r26, r1
 18a:	b1 05       	cpc	r27, r1
 18c:	91 f4       	brne	.+36     	; 0x1b2 <__vector_10+0x74>
		TimerISR(); 				// Call the ISR that the user uses
 18e:	0e 94 9b 00 	call	0x136	; 0x136 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 192:	80 91 77 00 	lds	r24, 0x0077
 196:	90 91 78 00 	lds	r25, 0x0078
 19a:	a0 91 79 00 	lds	r26, 0x0079
 19e:	b0 91 7a 00 	lds	r27, 0x007A
 1a2:	80 93 82 00 	sts	0x0082, r24
 1a6:	90 93 83 00 	sts	0x0083, r25
 1aa:	a0 93 84 00 	sts	0x0084, r26
 1ae:	b0 93 85 00 	sts	0x0085, r27
	}
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <LCD_WriteCmdStart>:
const unsigned char LCD_RS = 3; // LCD Reset pin is PB3
const unsigned char LCD_E = 4; // LCD Enable pin is PB4
unsigned char LCD_rdy_g = 0; // Set by LCD interface synchSM, ready to display new string
unsigned char LCD_go_g = 0; // Set by user synchSM wishing to display string in LCD_string_g
unsigned char LCD_string_g[17]; // Filled by user synchSM, 16 chars plus end-of-string char
void LCD_WriteCmdStart(unsigned char cmd) {
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	18 2f       	mov	r17, r24
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_RS, 0);
 1dc:	c0 91 73 00 	lds	r28, 0x0073
 1e0:	d0 91 74 00 	lds	r29, 0x0074
 1e4:	88 81       	ld	r24, Y
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
 1ee:	88 83       	st	Y, r24
	*LCD_Data = cmd;
 1f0:	e0 91 75 00 	lds	r30, 0x0075
 1f4:	f0 91 76 00 	lds	r31, 0x0076
 1f8:	10 83       	st	Z, r17
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 1);
 1fa:	c0 91 73 00 	lds	r28, 0x0073
 1fe:	d0 91 74 00 	lds	r29, 0x0074
 202:	88 81       	ld	r24, Y
 204:	64 e0       	ldi	r22, 0x04	; 4
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
 20c:	88 83       	st	Y, r24
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	08 95       	ret

00000216 <LCD_WriteCmdEnd>:
void LCD_WriteCmdEnd() {
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 0);
 21a:	c0 91 73 00 	lds	r28, 0x0073
 21e:	d0 91 74 00 	lds	r29, 0x0074
 222:	88 81       	ld	r24, Y
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
 22c:	88 83       	st	Y, r24
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <LCD_WriteDataStart>:
void LCD_WriteDataStart(unsigned char Data) {
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	18 2f       	mov	r17, r24
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_RS,1);
 23c:	c0 91 73 00 	lds	r28, 0x0073
 240:	d0 91 74 00 	lds	r29, 0x0074
 244:	88 81       	ld	r24, Y
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
 24e:	88 83       	st	Y, r24
	*LCD_Data = Data;
 250:	e0 91 75 00 	lds	r30, 0x0075
 254:	f0 91 76 00 	lds	r31, 0x0076
 258:	10 83       	st	Z, r17
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 1);
 25a:	c0 91 73 00 	lds	r28, 0x0073
 25e:	d0 91 74 00 	lds	r29, 0x0074
 262:	88 81       	ld	r24, Y
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
 26c:	88 83       	st	Y, r24
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <LCD_WriteDataEnd>:
void LCD_WriteDataEnd() {
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
	*LCD_Ctrl = SetBit(*LCD_Ctrl,LCD_E, 0);
 27a:	c0 91 73 00 	lds	r28, 0x0073
 27e:	d0 91 74 00 	lds	r29, 0x0074
 282:	88 81       	ld	r24, Y
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	0e 94 49 00 	call	0x92	; 0x92 <SetBit>
 28c:	88 83       	st	Y, r24
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <LCD_Cursor>:
void LCD_Cursor(unsigned char column ) {
	if ( column < 16 ) { // IEEE change this value to 16, was 8
 294:	80 31       	cpi	r24, 0x10	; 16
 296:	20 f4       	brcc	.+8      	; 0x2a0 <LCD_Cursor+0xc>
	LCD_WriteCmdStart(0x80+column);
 298:	80 58       	subi	r24, 0x80	; 128
 29a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
 29e:	08 95       	ret
}
else {
	LCD_WriteCmdStart(0xBF+column); // IEEE change this value to 0xBF+column // was B8
 2a0:	81 54       	subi	r24, 0x41	; 65
 2a2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
 2a6:	08 95       	ret

000002a8 <LI_Tick>:
}
}
enum LI_States { LI_Init1, LI_Init2, LI_Init3, LI_Init4, LI_Init5, LI_Init6,
		LI_WaitDisplayString, LI_Clr, LI_PositionCursor, LI_DisplayChar, LI_WaitGo0 } LI_State;
void LI_Tick() {
 2a8:	cf 93       	push	r28
	static unsigned char i;
	switch(LI_State) { // Transitions
 2aa:	80 91 8c 00 	lds	r24, 0x008C
 2ae:	85 30       	cpi	r24, 0x05	; 5
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <LI_Tick+0xc>
 2b2:	45 c0       	rjmp	.+138    	; 0x33e <LI_Tick+0x96>
 2b4:	86 30       	cpi	r24, 0x06	; 6
 2b6:	80 f4       	brcc	.+32     	; 0x2d8 <LI_Tick+0x30>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	79 f1       	breq	.+94     	; 0x31a <LI_Tick+0x72>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	30 f4       	brcc	.+12     	; 0x2cc <LI_Tick+0x24>
 2c0:	88 23       	and	r24, r24
 2c2:	e1 f0       	breq	.+56     	; 0x2fc <LI_Tick+0x54>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	09 f0       	breq	.+2      	; 0x2ca <LI_Tick+0x22>
 2c8:	75 c0       	rjmp	.+234    	; 0x3b4 <LI_Tick+0x10c>
 2ca:	1e c0       	rjmp	.+60     	; 0x308 <LI_Tick+0x60>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	59 f1       	breq	.+86     	; 0x326 <LI_Tick+0x7e>
 2d0:	84 30       	cpi	r24, 0x04	; 4
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <LI_Tick+0x2e>
 2d4:	6f c0       	rjmp	.+222    	; 0x3b4 <LI_Tick+0x10c>
 2d6:	2d c0       	rjmp	.+90     	; 0x332 <LI_Tick+0x8a>
 2d8:	88 30       	cpi	r24, 0x08	; 8
 2da:	09 f4       	brne	.+2      	; 0x2de <LI_Tick+0x36>
 2dc:	49 c0       	rjmp	.+146    	; 0x370 <LI_Tick+0xc8>
 2de:	89 30       	cpi	r24, 0x09	; 9
 2e0:	30 f4       	brcc	.+12     	; 0x2ee <LI_Tick+0x46>
 2e2:	86 30       	cpi	r24, 0x06	; 6
 2e4:	91 f1       	breq	.+100    	; 0x34a <LI_Tick+0xa2>
 2e6:	87 30       	cpi	r24, 0x07	; 7
 2e8:	09 f0       	breq	.+2      	; 0x2ec <LI_Tick+0x44>
 2ea:	64 c0       	rjmp	.+200    	; 0x3b4 <LI_Tick+0x10c>
 2ec:	39 c0       	rjmp	.+114    	; 0x360 <LI_Tick+0xb8>
 2ee:	89 30       	cpi	r24, 0x09	; 9
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <LI_Tick+0x4c>
 2f2:	44 c0       	rjmp	.+136    	; 0x37c <LI_Tick+0xd4>
 2f4:	8a 30       	cpi	r24, 0x0A	; 10
 2f6:	09 f0       	breq	.+2      	; 0x2fa <LI_Tick+0x52>
 2f8:	5d c0       	rjmp	.+186    	; 0x3b4 <LI_Tick+0x10c>
 2fa:	53 c0       	rjmp	.+166    	; 0x3a2 <LI_Tick+0xfa>
	case -1:
		LI_State = LI_Init1;
		break;
	case LI_Init1:
		LI_State = LI_Init2;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 8c 00 	sts	0x008C, r24
		i=0;
 302:	10 92 87 00 	sts	0x0087, r1
		break;
 306:	59 c0       	rjmp	.+178    	; 0x3ba <LI_Tick+0x112>
	case LI_Init2:
		if (i<10) { // Wait 100 ms after power up
 308:	80 91 87 00 	lds	r24, 0x0087
 30c:	8a 30       	cpi	r24, 0x0A	; 10
 30e:	08 f4       	brcc	.+2      	; 0x312 <LI_Tick+0x6a>
 310:	74 c0       	rjmp	.+232    	; 0x3fa <LI_Tick+0x152>
			LI_State = LI_Init2;
		}
		else {
			LI_State = LI_Init3;
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 93 8c 00 	sts	0x008C, r24
 318:	76 c0       	rjmp	.+236    	; 0x406 <LI_Tick+0x15e>
		}
		break;
	case LI_Init3:
		LI_State = LI_Init4;
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteCmdEnd();
 320:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteCmdEnd>
		break;
 324:	4a c0       	rjmp	.+148    	; 0x3ba <LI_Tick+0x112>
	case LI_Init4:
		LI_State = LI_Init5;
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteCmdEnd();
 32c:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteCmdEnd>
		break;
 330:	44 c0       	rjmp	.+136    	; 0x3ba <LI_Tick+0x112>
	case LI_Init5:
		LI_State = LI_Init6;
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteCmdEnd();
 338:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteCmdEnd>
		break;
 33c:	3e c0       	rjmp	.+124    	; 0x3ba <LI_Tick+0x112>
	case LI_Init6:
		LI_State = LI_WaitDisplayString;
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteCmdEnd();
 344:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteCmdEnd>
		break;
 348:	38 c0       	rjmp	.+112    	; 0x3ba <LI_Tick+0x112>
	//////////////////////////////////////////////
	case LI_WaitDisplayString:
		if (!LCD_go_g) {
 34a:	80 91 80 00 	lds	r24, 0x0080
 34e:	88 23       	and	r24, r24
 350:	09 f4       	brne	.+2      	; 0x354 <LI_Tick+0xac>
 352:	69 c0       	rjmp	.+210    	; 0x426 <LI_Tick+0x17e>
			LI_State = LI_WaitDisplayString;
		}
		else if (LCD_go_g) {
			LCD_rdy_g = 0;
 354:	10 92 81 00 	sts	0x0081, r1
			LI_State = LI_Clr;
 358:	87 e0       	ldi	r24, 0x07	; 7
 35a:	80 93 8c 00 	sts	0x008C, r24
 35e:	67 c0       	rjmp	.+206    	; 0x42e <LI_Tick+0x186>
		}
		break;
	case LI_Clr:
		LI_State = LI_PositionCursor;
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteCmdEnd();
 366:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteCmdEnd>
		i=0;
 36a:	10 92 87 00 	sts	0x0087, r1
		break;
 36e:	25 c0       	rjmp	.+74     	; 0x3ba <LI_Tick+0x112>
	case LI_PositionCursor:
		LI_State = LI_DisplayChar;
 370:	89 e0       	ldi	r24, 0x09	; 9
 372:	80 93 8c 00 	sts	0x008C, r24
		LCD_WriteCmdEnd();
 376:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_WriteCmdEnd>
		break;
 37a:	1f c0       	rjmp	.+62     	; 0x3ba <LI_Tick+0x112>
	case LI_DisplayChar:
		if (i<16) {
 37c:	c0 91 87 00 	lds	r28, 0x0087
 380:	c0 31       	cpi	r28, 0x10	; 16
 382:	48 f4       	brcc	.+18     	; 0x396 <LI_Tick+0xee>
			LI_State = LI_PositionCursor;
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	80 93 8c 00 	sts	0x008C, r24
			LCD_WriteDataEnd();
 38a:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_WriteDataEnd>
			i++;
 38e:	cf 5f       	subi	r28, 0xFF	; 255
 390:	c0 93 87 00 	sts	0x0087, r28
 394:	12 c0       	rjmp	.+36     	; 0x3ba <LI_Tick+0x112>
		}
		else {
			LI_State = LI_WaitGo0;
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	80 93 8c 00 	sts	0x008C, r24
			LCD_WriteDataEnd();
 39c:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_WriteDataEnd>
 3a0:	0c c0       	rjmp	.+24     	; 0x3ba <LI_Tick+0x112>
		}
		break;
	case LI_WaitGo0:
		if (!LCD_go_g) {
 3a2:	80 91 80 00 	lds	r24, 0x0080
 3a6:	88 23       	and	r24, r24
 3a8:	09 f0       	breq	.+2      	; 0x3ac <LI_Tick+0x104>
 3aa:	53 c0       	rjmp	.+166    	; 0x452 <LI_Tick+0x1aa>
			LI_State = LI_WaitDisplayString;
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	80 93 8c 00 	sts	0x008C, r24
 3b2:	39 c0       	rjmp	.+114    	; 0x426 <LI_Tick+0x17e>
		else if (LCD_go_g) {
			LI_State = LI_WaitGo0;
		}
		break;
	default:
		LI_State = LI_Init1;
 3b4:	10 92 8c 00 	sts	0x008C, r1
 3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <LI_Tick+0x14c>
	} // Transitions
	
	switch(LI_State) { // State actions
 3ba:	80 91 8c 00 	lds	r24, 0x008C
 3be:	84 30       	cpi	r24, 0x04	; 4
 3c0:	51 f1       	breq	.+84     	; 0x416 <LI_Tick+0x16e>
 3c2:	85 30       	cpi	r24, 0x05	; 5
 3c4:	48 f4       	brcc	.+18     	; 0x3d8 <LI_Tick+0x130>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	c1 f0       	breq	.+48     	; 0x3fa <LI_Tick+0x152>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	98 f0       	brcs	.+38     	; 0x3f4 <LI_Tick+0x14c>
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	d1 f0       	breq	.+52     	; 0x406 <LI_Tick+0x15e>
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	f1 f5       	brne	.+124    	; 0x452 <LI_Tick+0x1aa>
 3d6:	1b c0       	rjmp	.+54     	; 0x40e <LI_Tick+0x166>
 3d8:	87 30       	cpi	r24, 0x07	; 7
 3da:	49 f1       	breq	.+82     	; 0x42e <LI_Tick+0x186>
 3dc:	88 30       	cpi	r24, 0x08	; 8
 3de:	28 f4       	brcc	.+10     	; 0x3ea <LI_Tick+0x142>
 3e0:	85 30       	cpi	r24, 0x05	; 5
 3e2:	e9 f0       	breq	.+58     	; 0x41e <LI_Tick+0x176>
 3e4:	86 30       	cpi	r24, 0x06	; 6
 3e6:	a9 f5       	brne	.+106    	; 0x452 <LI_Tick+0x1aa>
 3e8:	1e c0       	rjmp	.+60     	; 0x426 <LI_Tick+0x17e>
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	21 f1       	breq	.+72     	; 0x436 <LI_Tick+0x18e>
 3ee:	89 30       	cpi	r24, 0x09	; 9
 3f0:	81 f5       	brne	.+96     	; 0x452 <LI_Tick+0x1aa>
 3f2:	26 c0       	rjmp	.+76     	; 0x440 <LI_Tick+0x198>
	case LI_Init1:
		LCD_rdy_g = 0;
 3f4:	10 92 81 00 	sts	0x0081, r1
		break;
 3f8:	2c c0       	rjmp	.+88     	; 0x452 <LI_Tick+0x1aa>
	case LI_Init2:
		i++; // Waiting after power up
 3fa:	80 91 87 00 	lds	r24, 0x0087
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 87 00 	sts	0x0087, r24
		break;
 404:	26 c0       	rjmp	.+76     	; 0x452 <LI_Tick+0x1aa>
	case LI_Init3:
		LCD_WriteCmdStart(0x38);
 406:	88 e3       	ldi	r24, 0x38	; 56
 408:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
		break;
 40c:	22 c0       	rjmp	.+68     	; 0x452 <LI_Tick+0x1aa>
	case LI_Init4:
		LCD_WriteCmdStart(0x06);
 40e:	86 e0       	ldi	r24, 0x06	; 6
 410:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
		break;
 414:	1e c0       	rjmp	.+60     	; 0x452 <LI_Tick+0x1aa>
	case LI_Init5:
		LCD_WriteCmdStart(0x0F);
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
		break;
 41c:	1a c0       	rjmp	.+52     	; 0x452 <LI_Tick+0x1aa>
	case LI_Init6:
		LCD_WriteCmdStart(0x01); // Clear
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
		break;
 424:	16 c0       	rjmp	.+44     	; 0x452 <LI_Tick+0x1aa>
	//////////////////////////////////////////////
	case LI_WaitDisplayString:
		LCD_rdy_g = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 81 00 	sts	0x0081, r24
		break;
 42c:	12 c0       	rjmp	.+36     	; 0x452 <LI_Tick+0x1aa>
	case LI_Clr:
		LCD_WriteCmdStart(0x01);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_WriteCmdStart>
		break;
 434:	0e c0       	rjmp	.+28     	; 0x452 <LI_Tick+0x1aa>
	case LI_PositionCursor:
		LCD_Cursor(i);
 436:	80 91 87 00 	lds	r24, 0x0087
 43a:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_Cursor>
		break;
 43e:	09 c0       	rjmp	.+18     	; 0x452 <LI_Tick+0x1aa>
	case LI_DisplayChar:
		LCD_WriteDataStart(LCD_string_g[i]);
 440:	80 91 87 00 	lds	r24, 0x0087
 444:	ed e8       	ldi	r30, 0x8D	; 141
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	e8 0f       	add	r30, r24
 44a:	f1 1d       	adc	r31, r1
 44c:	80 81       	ld	r24, Z
 44e:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_WriteDataStart>
	case LI_WaitGo0:
		break;
	default:
		break;
	} // State actions
}
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <LT_Tick>:
enum LT_States { LT_s0, LT_WaitLcdRdy, LT_WaitButton, LT_FillAndDispString,
				LT_HoldGo1, LT_WaitBtnRelease } LT_State;
void LT_Tick() {
	static unsigned short j;
	static unsigned char i, x, c;
	switch(LT_State) { // Transitions
 456:	80 91 8b 00 	lds	r24, 0x008B
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	e9 f0       	breq	.+58     	; 0x498 <LT_Tick+0x42>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	30 f4       	brcc	.+12     	; 0x46e <LT_Tick+0x18>
 462:	88 23       	and	r24, r24
 464:	61 f0       	breq	.+24     	; 0x47e <LT_Tick+0x28>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <LT_Tick+0x16>
 46a:	51 c0       	rjmp	.+162    	; 0x50e <LT_Tick+0xb8>
 46c:	0c c0       	rjmp	.+24     	; 0x486 <LT_Tick+0x30>
 46e:	84 30       	cpi	r24, 0x04	; 4
 470:	c9 f1       	breq	.+114    	; 0x4e4 <LT_Tick+0x8e>
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	98 f1       	brcs	.+102    	; 0x4dc <LT_Tick+0x86>
 476:	85 30       	cpi	r24, 0x05	; 5
 478:	09 f0       	breq	.+2      	; 0x47c <LT_Tick+0x26>
 47a:	49 c0       	rjmp	.+146    	; 0x50e <LT_Tick+0xb8>
 47c:	39 c0       	rjmp	.+114    	; 0x4f0 <LT_Tick+0x9a>
	case -1:
		LT_State = LT_s0;
		break;
	case LT_s0:
		LT_State = LT_WaitLcdRdy;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 8b 00 	sts	0x008B, r24
		break;
 484:	08 95       	ret
	case LT_WaitLcdRdy:
		if (!LCD_rdy_g) {
 486:	80 91 81 00 	lds	r24, 0x0081
 48a:	88 23       	and	r24, r24
 48c:	09 f4       	brne	.+2      	; 0x490 <LT_Tick+0x3a>
 48e:	59 c0       	rjmp	.+178    	; 0x542 <LT_Tick+0xec>
			LT_State = LT_WaitLcdRdy;
		}
		else if (LCD_rdy_g) {
			LT_State = LT_WaitButton;
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	80 93 8b 00 	sts	0x008B, r24
 496:	08 95       	ret
		}
		break;
	case LT_WaitButton:
		if (GetBit(PINA,0)==1) {
 498:	89 b3       	in	r24, 0x19	; 25
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <LT_Tick+0x50>
 4a4:	4e c0       	rjmp	.+156    	; 0x542 <LT_Tick+0xec>
			LT_State = LT_WaitButton;
		}
		else if (GetBit(PINA,0)==0) { // Button active low
 4a6:	89 b3       	in	r24, 0x19	; 25
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
 4ae:	88 23       	and	r24, r24
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <LT_Tick+0x5e>
 4b2:	47 c0       	rjmp	.+142    	; 0x542 <LT_Tick+0xec>
			LT_State = LT_FillAndDispString;
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	80 93 8b 00 	sts	0x008B, r24
	case LT_WaitLcdRdy:
		break;
	case LT_WaitButton:
		break;
	case LT_FillAndDispString:
		x = rand() % 10; // x is rand num 0-9
 4ba:	0e 94 3a 03 	call	0x674	; 0x674 <rand>
 4be:	6a e0       	ldi	r22, 0x0A	; 10
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 4c6:	80 93 88 00 	sts	0x0088, r24
		c = (char)(((int)'0')+x); // c is ascii of num x
 4ca:	80 5d       	subi	r24, 0xD0	; 208
 4cc:	80 93 89 00 	sts	0x0089, r24
 4d0:	ed e8       	ldi	r30, 0x8D	; 141
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
}
	//--------END LCD interface synchSM------------------------------------------------
	// SynchSM for testing the LCD interface -- waits for button press, fills LCD with repeated random num
enum LT_States { LT_s0, LT_WaitLcdRdy, LT_WaitButton, LT_FillAndDispString,
				LT_HoldGo1, LT_WaitBtnRelease } LT_State;
void LT_Tick() {
 4d4:	9f 01       	movw	r18, r30
 4d6:	20 5f       	subi	r18, 0xF0	; 240
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	27 c0       	rjmp	.+78     	; 0x52a <LT_Tick+0xd4>
		else if (GetBit(PINA,0)==0) { // Button active low
			LT_State = LT_FillAndDispString;
		}
		break;
	case LT_FillAndDispString:
		LT_State = LT_HoldGo1;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	80 93 8b 00 	sts	0x008B, r24
		break;
 4e2:	08 95       	ret
	case LT_HoldGo1:
		LCD_go_g=0;
 4e4:	10 92 80 00 	sts	0x0080, r1
		LT_State = LT_WaitBtnRelease;
 4e8:	85 e0       	ldi	r24, 0x05	; 5
 4ea:	80 93 8b 00 	sts	0x008B, r24
		break;
 4ee:	08 95       	ret
	case LT_WaitBtnRelease:
		if (GetBit(PINA,0)==0) { // Wait for button release
 4f0:	89 b3       	in	r24, 0x19	; 25
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
 4f8:	88 23       	and	r24, r24
 4fa:	19 f1       	breq	.+70     	; 0x542 <LT_Tick+0xec>
			LT_State = LT_WaitBtnRelease;
		}
		else if (GetBit(PINA,0)==1) {
 4fc:	89 b3       	in	r24, 0x19	; 25
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	0e 94 61 00 	call	0xc2	; 0xc2 <GetBit>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	e9 f4       	brne	.+58     	; 0x542 <LT_Tick+0xec>
			LT_State = LT_WaitLcdRdy;
 508:	80 93 8b 00 	sts	0x008B, r24
 50c:	08 95       	ret
		}
		break;
	default:
		LT_State = LT_s0;
 50e:	10 92 8b 00 	sts	0x008B, r1
	} // Transitions
	
	switch(LT_State) { // State actions
	case LT_s0:
		LCD_go_g=0;
 512:	10 92 80 00 	sts	0x0080, r1
		strcpy(LCD_string_g, "1234567890123456"); // Init, but never seen, shows use of strcpy though
 516:	ad e8       	ldi	r26, 0x8D	; 141
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e0 e6       	ldi	r30, 0x60	; 96
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	81 e1       	ldi	r24, 0x11	; 17
 520:	01 90       	ld	r0, Z+
 522:	0d 92       	st	X+, r0
 524:	81 50       	subi	r24, 0x01	; 1
 526:	e1 f7       	brne	.-8      	; 0x520 <LT_Tick+0xca>
 528:	08 95       	ret
		break;
	case LT_FillAndDispString:
		x = rand() % 10; // x is rand num 0-9
		c = (char)(((int)'0')+x); // c is ascii of num x
		for (i=0; i<16; i++) { // Fill string with c
			LCD_string_g[i] = c;
 52a:	81 93       	st	Z+, r24
	case LT_WaitButton:
		break;
	case LT_FillAndDispString:
		x = rand() % 10; // x is rand num 0-9
		c = (char)(((int)'0')+x); // c is ascii of num x
		for (i=0; i<16; i++) { // Fill string with c
 52c:	e2 17       	cp	r30, r18
 52e:	f3 07       	cpc	r31, r19
 530:	e1 f7       	brne	.-8      	; 0x52a <LT_Tick+0xd4>
 532:	80 e1       	ldi	r24, 0x10	; 16
 534:	80 93 8a 00 	sts	0x008A, r24
			LCD_string_g[i] = c;
		}
		LCD_string_g[i] = '\0'; // End-of-string char
 538:	10 92 9d 00 	sts	0x009D, r1
		LCD_go_g = 1; // Display string
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	80 93 80 00 	sts	0x0080, r24
 542:	08 95       	ret

00000544 <main>:
	default:
		break;
	} // State actions
}
int main() {
	DDRB = 0xFF; // Set port B to output
 544:	cf ef       	ldi	r28, 0xFF	; 255
 546:	c7 bb       	out	0x17, r28	; 23
	DDRD = 0xFF; // Set port D to output
 548:	c1 bb       	out	0x11, r28	; 17
	DDRA = 0x00; PORTA = 0xFF;
 54a:	1a ba       	out	0x1a, r1	; 26
 54c:	cb bb       	out	0x1b, r28	; 27
	TimerSet(10);
 54e:	6a e0       	ldi	r22, 0x0A	; 10
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 6b 00 	call	0xd6	; 0xd6 <TimerSet>
	TimerOn();
 55a:	0e 94 7e 00 	call	0xfc	; 0xfc <TimerOn>
	LI_State = -1;
 55e:	c0 93 8c 00 	sts	0x008C, r28
	LT_State = -1;
 562:	c0 93 8b 00 	sts	0x008B, r28
	while(1) {
		LI_Tick();
 566:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LI_Tick>
		LT_Tick();
 56a:	0e 94 2b 02 	call	0x456	; 0x456 <LT_Tick>
		while (!TimerFlag);
 56e:	80 91 86 00 	lds	r24, 0x0086
 572:	88 23       	and	r24, r24
 574:	e1 f3       	breq	.-8      	; 0x56e <main+0x2a>
			TimerFlag = 0;
 576:	10 92 86 00 	sts	0x0086, r1
	}
 57a:	f5 cf       	rjmp	.-22     	; 0x566 <main+0x22>

0000057c <__divmodhi4>:
 57c:	97 fb       	bst	r25, 7
 57e:	09 2e       	mov	r0, r25
 580:	07 26       	eor	r0, r23
 582:	0a d0       	rcall	.+20     	; 0x598 <__divmodhi4_neg1>
 584:	77 fd       	sbrc	r23, 7
 586:	04 d0       	rcall	.+8      	; 0x590 <__divmodhi4_neg2>
 588:	0c d0       	rcall	.+24     	; 0x5a2 <__udivmodhi4>
 58a:	06 d0       	rcall	.+12     	; 0x598 <__divmodhi4_neg1>
 58c:	00 20       	and	r0, r0
 58e:	1a f4       	brpl	.+6      	; 0x596 <__divmodhi4_exit>

00000590 <__divmodhi4_neg2>:
 590:	70 95       	com	r23
 592:	61 95       	neg	r22
 594:	7f 4f       	sbci	r23, 0xFF	; 255

00000596 <__divmodhi4_exit>:
 596:	08 95       	ret

00000598 <__divmodhi4_neg1>:
 598:	f6 f7       	brtc	.-4      	; 0x596 <__divmodhi4_exit>
 59a:	90 95       	com	r25
 59c:	81 95       	neg	r24
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	08 95       	ret

000005a2 <__udivmodhi4>:
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	51 e1       	ldi	r21, 0x11	; 17
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__udivmodhi4_ep>

000005aa <__udivmodhi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	a6 17       	cp	r26, r22
 5b0:	b7 07       	cpc	r27, r23
 5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__udivmodhi4_ep>
 5b4:	a6 1b       	sub	r26, r22
 5b6:	b7 0b       	sbc	r27, r23

000005b8 <__udivmodhi4_ep>:
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	5a 95       	dec	r21
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__udivmodhi4_loop>
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	bc 01       	movw	r22, r24
 5c6:	cd 01       	movw	r24, r26
 5c8:	08 95       	ret

000005ca <do_rand>:
 5ca:	8f 92       	push	r8
 5cc:	9f 92       	push	r9
 5ce:	af 92       	push	r10
 5d0:	bf 92       	push	r11
 5d2:	cf 92       	push	r12
 5d4:	df 92       	push	r13
 5d6:	ef 92       	push	r14
 5d8:	ff 92       	push	r15
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	ec 01       	movw	r28, r24
 5e0:	88 81       	ld	r24, Y
 5e2:	99 81       	ldd	r25, Y+1	; 0x01
 5e4:	aa 81       	ldd	r26, Y+2	; 0x02
 5e6:	bb 81       	ldd	r27, Y+3	; 0x03
 5e8:	00 97       	sbiw	r24, 0x00	; 0
 5ea:	a1 05       	cpc	r26, r1
 5ec:	b1 05       	cpc	r27, r1
 5ee:	21 f4       	brne	.+8      	; 0x5f8 <do_rand+0x2e>
 5f0:	84 e2       	ldi	r24, 0x24	; 36
 5f2:	99 ed       	ldi	r25, 0xD9	; 217
 5f4:	ab e5       	ldi	r26, 0x5B	; 91
 5f6:	b7 e0       	ldi	r27, 0x07	; 7
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	2d e1       	ldi	r18, 0x1D	; 29
 5fe:	33 ef       	ldi	r19, 0xF3	; 243
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divmodsi4>
 608:	49 01       	movw	r8, r18
 60a:	5a 01       	movw	r10, r20
 60c:	27 ea       	ldi	r18, 0xA7	; 167
 60e:	31 e4       	ldi	r19, 0x41	; 65
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	0e 94 4a 03 	call	0x694	; 0x694 <__mulsi3>
 618:	6b 01       	movw	r12, r22
 61a:	7c 01       	movw	r14, r24
 61c:	c5 01       	movw	r24, r10
 61e:	b4 01       	movw	r22, r8
 620:	2c ee       	ldi	r18, 0xEC	; 236
 622:	34 ef       	ldi	r19, 0xF4	; 244
 624:	4f ef       	ldi	r20, 0xFF	; 255
 626:	5f ef       	ldi	r21, 0xFF	; 255
 628:	0e 94 4a 03 	call	0x694	; 0x694 <__mulsi3>
 62c:	dc 01       	movw	r26, r24
 62e:	cb 01       	movw	r24, r22
 630:	c8 0e       	add	r12, r24
 632:	d9 1e       	adc	r13, r25
 634:	ea 1e       	adc	r14, r26
 636:	fb 1e       	adc	r15, r27
 638:	f7 fe       	sbrs	r15, 7
 63a:	08 c0       	rjmp	.+16     	; 0x64c <do_rand+0x82>
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	9f ef       	ldi	r25, 0xFF	; 255
 640:	af ef       	ldi	r26, 0xFF	; 255
 642:	bf e7       	ldi	r27, 0x7F	; 127
 644:	c8 0e       	add	r12, r24
 646:	d9 1e       	adc	r13, r25
 648:	ea 1e       	adc	r14, r26
 64a:	fb 1e       	adc	r15, r27
 64c:	c8 82       	st	Y, r12
 64e:	d9 82       	std	Y+1, r13	; 0x01
 650:	ea 82       	std	Y+2, r14	; 0x02
 652:	fb 82       	std	Y+3, r15	; 0x03
 654:	c6 01       	movw	r24, r12
 656:	9f 77       	andi	r25, 0x7F	; 127
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	df 90       	pop	r13
 662:	cf 90       	pop	r12
 664:	bf 90       	pop	r11
 666:	af 90       	pop	r10
 668:	9f 90       	pop	r9
 66a:	8f 90       	pop	r8
 66c:	08 95       	ret

0000066e <rand_r>:
 66e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <do_rand>
 672:	08 95       	ret

00000674 <rand>:
 674:	8b e7       	ldi	r24, 0x7B	; 123
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 e5 02 	call	0x5ca	; 0x5ca <do_rand>
 67c:	08 95       	ret

0000067e <srand>:
 67e:	a0 e0       	ldi	r26, 0x00	; 0
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	80 93 7b 00 	sts	0x007B, r24
 686:	90 93 7c 00 	sts	0x007C, r25
 68a:	a0 93 7d 00 	sts	0x007D, r26
 68e:	b0 93 7e 00 	sts	0x007E, r27
 692:	08 95       	ret

00000694 <__mulsi3>:
 694:	62 9f       	mul	r22, r18
 696:	d0 01       	movw	r26, r0
 698:	73 9f       	mul	r23, r19
 69a:	f0 01       	movw	r30, r0
 69c:	82 9f       	mul	r24, r18
 69e:	e0 0d       	add	r30, r0
 6a0:	f1 1d       	adc	r31, r1
 6a2:	64 9f       	mul	r22, r20
 6a4:	e0 0d       	add	r30, r0
 6a6:	f1 1d       	adc	r31, r1
 6a8:	92 9f       	mul	r25, r18
 6aa:	f0 0d       	add	r31, r0
 6ac:	83 9f       	mul	r24, r19
 6ae:	f0 0d       	add	r31, r0
 6b0:	74 9f       	mul	r23, r20
 6b2:	f0 0d       	add	r31, r0
 6b4:	65 9f       	mul	r22, r21
 6b6:	f0 0d       	add	r31, r0
 6b8:	99 27       	eor	r25, r25
 6ba:	72 9f       	mul	r23, r18
 6bc:	b0 0d       	add	r27, r0
 6be:	e1 1d       	adc	r30, r1
 6c0:	f9 1f       	adc	r31, r25
 6c2:	63 9f       	mul	r22, r19
 6c4:	b0 0d       	add	r27, r0
 6c6:	e1 1d       	adc	r30, r1
 6c8:	f9 1f       	adc	r31, r25
 6ca:	bd 01       	movw	r22, r26
 6cc:	cf 01       	movw	r24, r30
 6ce:	11 24       	eor	r1, r1
 6d0:	08 95       	ret

000006d2 <__divmodsi4>:
 6d2:	97 fb       	bst	r25, 7
 6d4:	09 2e       	mov	r0, r25
 6d6:	05 26       	eor	r0, r21
 6d8:	0e d0       	rcall	.+28     	; 0x6f6 <__divmodsi4_neg1>
 6da:	57 fd       	sbrc	r21, 7
 6dc:	04 d0       	rcall	.+8      	; 0x6e6 <__divmodsi4_neg2>
 6de:	14 d0       	rcall	.+40     	; 0x708 <__udivmodsi4>
 6e0:	0a d0       	rcall	.+20     	; 0x6f6 <__divmodsi4_neg1>
 6e2:	00 1c       	adc	r0, r0
 6e4:	38 f4       	brcc	.+14     	; 0x6f4 <__divmodsi4_exit>

000006e6 <__divmodsi4_neg2>:
 6e6:	50 95       	com	r21
 6e8:	40 95       	com	r20
 6ea:	30 95       	com	r19
 6ec:	21 95       	neg	r18
 6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 6f0:	4f 4f       	sbci	r20, 0xFF	; 255
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255

000006f4 <__divmodsi4_exit>:
 6f4:	08 95       	ret

000006f6 <__divmodsi4_neg1>:
 6f6:	f6 f7       	brtc	.-4      	; 0x6f4 <__divmodsi4_exit>
 6f8:	90 95       	com	r25
 6fa:	80 95       	com	r24
 6fc:	70 95       	com	r23
 6fe:	61 95       	neg	r22
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	8f 4f       	sbci	r24, 0xFF	; 255
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	08 95       	ret

00000708 <__udivmodsi4>:
 708:	a1 e2       	ldi	r26, 0x21	; 33
 70a:	1a 2e       	mov	r1, r26
 70c:	aa 1b       	sub	r26, r26
 70e:	bb 1b       	sub	r27, r27
 710:	fd 01       	movw	r30, r26
 712:	0d c0       	rjmp	.+26     	; 0x72e <__udivmodsi4_ep>

00000714 <__udivmodsi4_loop>:
 714:	aa 1f       	adc	r26, r26
 716:	bb 1f       	adc	r27, r27
 718:	ee 1f       	adc	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	a2 17       	cp	r26, r18
 71e:	b3 07       	cpc	r27, r19
 720:	e4 07       	cpc	r30, r20
 722:	f5 07       	cpc	r31, r21
 724:	20 f0       	brcs	.+8      	; 0x72e <__udivmodsi4_ep>
 726:	a2 1b       	sub	r26, r18
 728:	b3 0b       	sbc	r27, r19
 72a:	e4 0b       	sbc	r30, r20
 72c:	f5 0b       	sbc	r31, r21

0000072e <__udivmodsi4_ep>:
 72e:	66 1f       	adc	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	1a 94       	dec	r1
 738:	69 f7       	brne	.-38     	; 0x714 <__udivmodsi4_loop>
 73a:	60 95       	com	r22
 73c:	70 95       	com	r23
 73e:	80 95       	com	r24
 740:	90 95       	com	r25
 742:	9b 01       	movw	r18, r22
 744:	ac 01       	movw	r20, r24
 746:	bd 01       	movw	r22, r26
 748:	cf 01       	movw	r24, r30
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>
