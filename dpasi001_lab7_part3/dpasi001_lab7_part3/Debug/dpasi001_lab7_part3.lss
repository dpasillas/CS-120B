
dpasi001_lab7_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800074  00800074  00000396  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c3  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001af  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000181  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e2  00000000  00000000  00001a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  8a:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerOn>:
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
	// AVR timer/counter controller register TCCR0
	TCCR0 = 0x0B;	// bit3bit6=10: CTC mode (clear timer on compare)
  92:	8b e0       	ldi	r24, 0x0B	; 11
  94:	83 bf       	out	0x33, r24	; 51
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT0 register will count at 125,000 ticks/s

	// AVR output compare register OCR0.
	OCR0 = 25;	// Timer interrupt will be generated when TCNT0==OCR0
  96:	89 e1       	ldi	r24, 0x19	; 25
  98:	8c bf       	out	0x3c, r24	; 60
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT0 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK = 0x02; // bit1: OCIE0 -- enables compare match interrupt
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	89 bf       	out	0x39, r24	; 57

	//Initialize avr counter
	TCNT0=0;
  9e:	12 be       	out	0x32, r1	; 50

	_avr_timer_cntcurr = _avr_timer_M;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	a0 91 62 00 	lds	r26, 0x0062
  ac:	b0 91 63 00 	lds	r27, 0x0063
  b0:	80 93 76 00 	sts	0x0076, r24
  b4:	90 93 77 00 	sts	0x0077, r25
  b8:	a0 93 78 00 	sts	0x0078, r26
  bc:	b0 93 79 00 	sts	0x0079, r27
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
}
  c6:	08 95       	ret

000000c8 <TimerOff>:

void TimerOff() {
	TCCR0 = 0x00; // bit2bit1bit0=000: timer off
  c8:	13 be       	out	0x33, r1	; 51
}
  ca:	08 95       	ret

000000cc <TimerISR>:

void TimerISR() {
	TimerFlag = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 7a 00 	sts	0x007A, r24
}
  d2:	08 95       	ret

000000d4 <__vector_10>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER0_COMP_vect) {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	--_avr_timer_cntcurr; // Count down to 0 rather than up to TOP
  f6:	80 91 76 00 	lds	r24, 0x0076
  fa:	90 91 77 00 	lds	r25, 0x0077
  fe:	a0 91 78 00 	lds	r26, 0x0078
 102:	b0 91 79 00 	lds	r27, 0x0079
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	a1 09       	sbc	r26, r1
 10a:	b1 09       	sbc	r27, r1
 10c:	80 93 76 00 	sts	0x0076, r24
 110:	90 93 77 00 	sts	0x0077, r25
 114:	a0 93 78 00 	sts	0x0078, r26
 118:	b0 93 79 00 	sts	0x0079, r27
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	a1 05       	cpc	r26, r1
 120:	b1 05       	cpc	r27, r1
 122:	91 f4       	brne	.+36     	; 0x148 <__vector_10+0x74>
	TimerISR(); // Call the ISR that the user uses
 124:	0e 94 66 00 	call	0xcc	; 0xcc <TimerISR>
	_avr_timer_cntcurr = _avr_timer_M;
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	90 91 61 00 	lds	r25, 0x0061
 130:	a0 91 62 00 	lds	r26, 0x0062
 134:	b0 91 63 00 	lds	r27, 0x0063
 138:	80 93 76 00 	sts	0x0076, r24
 13c:	90 93 77 00 	sts	0x0077, r25
 140:	a0 93 78 00 	sts	0x0078, r26
 144:	b0 93 79 00 	sts	0x0079, r27
}
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
	_avr_timer_M = M;
 16e:	80 93 60 00 	sts	0x0060, r24
 172:	90 93 61 00 	sts	0x0061, r25
 176:	a0 93 62 00 	sts	0x0062, r26
 17a:	b0 93 63 00 	sts	0x0063, r27
	_avr_timer_cntcurr = _avr_timer_M;
 17e:	80 93 76 00 	sts	0x0076, r24
 182:	90 93 77 00 	sts	0x0077, r25
 186:	a0 93 78 00 	sts	0x0078, r26
 18a:	b0 93 79 00 	sts	0x0079, r27
}
 18e:	08 95       	ret

00000190 <Write7Seg>:
	0x77, 0x4C, //0111 0111, 0100 1100, //6, 7
	0x7F, 0x6F, //0111 1111, 0111 1111, //8, 9
	0x5F, 0x73, //0101 1111, 0111 0011, //A, B
	0x36, 0x79, //0111 0110, 0111 1001, //C, D
0x37, 0x17};//0011 0111, 0001 0111};//E, F
PORTC = ~Seg7[x%16];
 190:	e8 2f       	mov	r30, r24
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ef 70       	andi	r30, 0x0F	; 15
 196:	f0 70       	andi	r31, 0x00	; 0
 198:	ec 59       	subi	r30, 0x9C	; 156
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	80 81       	ld	r24, Z
 19e:	80 95       	com	r24
 1a0:	85 bb       	out	0x15, r24	; 21
}
 1a2:	08 95       	ret

000001a4 <LED_TICK>:
unsigned char led_states;
	
void LED_TICK()
{
	//transitions
	switch(l_state)
 1a4:	80 91 7d 00 	lds	r24, 0x007D
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	79 f0       	breq	.+30     	; 0x1ca <LED_TICK+0x26>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	30 f0       	brcs	.+12     	; 0x1bc <LED_TICK+0x18>
		break;
	case L1:
	    l_state = L2;
		break;
	case L2:
	    l_state = L0;
 1b0:	10 92 7d 00 	sts	0x007D, r1
	
	//
	switch(l_state)
	{
	case L0:
	    led_states = 0x01;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 7c 00 	sts	0x007C, r24
		break;
 1ba:	08 95       	ret
	{
	case INIT:
	    l_state = L0;
		break;
	case L0:
	    l_state = L1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 7d 00 	sts	0x007D, r24
	{
	case L0:
	    led_states = 0x01;
		break;
	case L1:
	    led_states = 0x02;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 7c 00 	sts	0x007C, r24
		break;
 1c8:	08 95       	ret
		break;
	case L0:
	    l_state = L1;
		break;
	case L1:
	    l_state = L2;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 7d 00 	sts	0x007D, r24
		break;
	case L1:
	    led_states = 0x02;
		break;
	case L2:
	    led_states = 0x04;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	80 93 7c 00 	sts	0x007C, r24
 1d6:	08 95       	ret

000001d8 <BLINK_TICK>:

unsigned char blink_state = 0;

void BLINK_TICK()
{
	switch(b_state)
 1d8:	80 91 7b 00 	lds	r24, 0x007B
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <BLINK_TICK+0xe>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	41 f4       	brne	.+16     	; 0x1f4 <BLINK_TICK+0x1c>
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <BLINK_TICK+0x16>
	{
	case INIT: b_state = B0; break;
	case B0: b_state = B1; break;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 7b 00 	sts	0x007B, r24
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <BLINK_TICK+0x2c>
	case B1: b_state = B0;
 1ee:	10 92 7b 00 	sts	0x007B, r1
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <BLINK_TICK+0x26>
	default: break; 
	}
	
	switch(b_state)
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <BLINK_TICK+0x26>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	39 f4       	brne	.+14     	; 0x20a <BLINK_TICK+0x32>
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <BLINK_TICK+0x2c>
	{
	case B0: blink_state = 0x00; break;
 1fe:	10 92 75 00 	sts	0x0075, r1
 202:	08 95       	ret
	case B1: blink_state = 0x08; break;
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	80 93 75 00 	sts	0x0075, r24
 20a:	08 95       	ret

0000020c <SOUND_TICK>:
}

unsigned char sound_state = 0;
void SOUND_TICK()
{
	if(~PINA & 4)
 20c:	ca 99       	sbic	0x19, 2	; 25
 20e:	06 c0       	rjmp	.+12     	; 0x21c <SOUND_TICK+0x10>
	    sound_state ^= 0x10;
 210:	90 91 74 00 	lds	r25, 0x0074
 214:	80 e1       	ldi	r24, 0x10	; 16
 216:	89 27       	eor	r24, r25
 218:	80 93 74 00 	sts	0x0074, r24
 21c:	08 95       	ret

0000021e <gcd>:
}
#define TICKS_PER_MS 5

unsigned short gcd(unsigned short a, unsigned short b)
{
 21e:	9b 01       	movw	r18, r22
	if(b == 0)
 220:	61 15       	cp	r22, r1
 222:	71 05       	cpc	r23, r1
 224:	39 f0       	breq	.+14     	; 0x234 <gcd+0x16>
	    return a;
	else
	    return gcd(b, a % b);
 226:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodhi4>
 22a:	68 2f       	mov	r22, r24
 22c:	79 2f       	mov	r23, r25
 22e:	c9 01       	movw	r24, r18
 230:	0e 94 0f 01 	call	0x21e	; 0x21e <gcd>
}
 234:	08 95       	ret

00000236 <main>:
void main()
{
	DDRA = 0x00; PORTA = 0xFF;
 236:	1a ba       	out	0x1a, r1	; 26
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0xFF; PORTB = 0x00;
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xFF; PORTC = 0xFF;
 240:	84 bb       	out	0x14, r24	; 20
 242:	85 bb       	out	0x15, r24	; 21
	
	TimerSet(1 * TICKS_PER_MS);
 244:	65 e0       	ldi	r22, 0x05	; 5
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 b5 00 	call	0x16a	; 0x16a <TimerSet>
	TimerOn();
 250:	0e 94 49 00 	call	0x92	; 0x92 <TimerOn>
	
	unsigned short lp = 300, bp = 1000, lt = lp, bt = bp,
	               sp = 2, st = sp;
 254:	c2 e0       	ldi	r28, 0x02	; 2
 256:	d0 e0       	ldi	r29, 0x00	; 0
	DDRC = 0xFF; PORTC = 0xFF;
	
	TimerSet(1 * TICKS_PER_MS);
	TimerOn();
	
	unsigned short lp = 300, bp = 1000, lt = lp, bt = bp,
 258:	08 ee       	ldi	r16, 0xE8	; 232
 25a:	13 e0       	ldi	r17, 0x03	; 3
 25c:	0f 2e       	mov	r0, r31
 25e:	fc e2       	ldi	r31, 0x2C	; 44
 260:	ef 2e       	mov	r14, r31
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	ff 2e       	mov	r15, r31
 266:	f0 2d       	mov	r31, r0
	               sp = 2, st = sp;
	
	while(1) {
		if(lt >= lp)
		{
            LED_TICK(); lt = 0;
 268:	cc 24       	eor	r12, r12
 26a:	dd 24       	eor	r13, r13
	
	unsigned short lp = 300, bp = 1000, lt = lp, bt = bp,
	               sp = 2, st = sp;
	
	while(1) {
		if(lt >= lp)
 26c:	8c e2       	ldi	r24, 0x2C	; 44
 26e:	e8 16       	cp	r14, r24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	f8 06       	cpc	r15, r24
 274:	18 f0       	brcs	.+6      	; 0x27c <main+0x46>
		{
            LED_TICK(); lt = 0;
 276:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_TICK>
 27a:	76 01       	movw	r14, r12
		}
		if(bt >= bp)
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	08 3e       	cpi	r16, 0xE8	; 232
 280:	18 07       	cpc	r17, r24
 282:	18 f0       	brcs	.+6      	; 0x28a <main+0x54>
		{
			BLINK_TICK(); bt = 0;
 284:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <BLINK_TICK>
 288:	86 01       	movw	r16, r12
		}
		if(st >= sp)
 28a:	c2 30       	cpi	r28, 0x02	; 2
 28c:	d1 05       	cpc	r29, r1
 28e:	18 f0       	brcs	.+6      	; 0x296 <main+0x60>
		{
		    SOUND_TICK(); st = 0;
 290:	0e 94 06 01 	call	0x20c	; 0x20c <SOUND_TICK>
 294:	e6 01       	movw	r28, r12
		}		
		bt += 1;
 296:	0f 5f       	subi	r16, 0xFF	; 255
 298:	1f 4f       	sbci	r17, 0xFF	; 255
		lt += 1;
 29a:	08 94       	sec
 29c:	e1 1c       	adc	r14, r1
 29e:	f1 1c       	adc	r15, r1
		st += 1;
 2a0:	21 96       	adiw	r28, 0x01	; 1
		PORTB = led_states | blink_state | sound_state;
 2a2:	90 91 75 00 	lds	r25, 0x0075
 2a6:	80 91 7c 00 	lds	r24, 0x007C
 2aa:	89 2b       	or	r24, r25
 2ac:	90 91 74 00 	lds	r25, 0x0074
 2b0:	89 2b       	or	r24, r25
 2b2:	88 bb       	out	0x18, r24	; 24
		
        while (!TimerFlag);	// Wait 1 sec
 2b4:	80 91 7a 00 	lds	r24, 0x007A
 2b8:	88 23       	and	r24, r24
 2ba:	e1 f3       	breq	.-8      	; 0x2b4 <main+0x7e>
		TimerFlag = 0;
 2bc:	10 92 7a 00 	sts	0x007A, r1
	}
 2c0:	d5 cf       	rjmp	.-86     	; 0x26c <main+0x36>

000002c2 <__udivmodhi4>:
 2c2:	aa 1b       	sub	r26, r26
 2c4:	bb 1b       	sub	r27, r27
 2c6:	51 e1       	ldi	r21, 0x11	; 17
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <__udivmodhi4_ep>

000002ca <__udivmodhi4_loop>:
 2ca:	aa 1f       	adc	r26, r26
 2cc:	bb 1f       	adc	r27, r27
 2ce:	a6 17       	cp	r26, r22
 2d0:	b7 07       	cpc	r27, r23
 2d2:	10 f0       	brcs	.+4      	; 0x2d8 <__udivmodhi4_ep>
 2d4:	a6 1b       	sub	r26, r22
 2d6:	b7 0b       	sbc	r27, r23

000002d8 <__udivmodhi4_ep>:
 2d8:	88 1f       	adc	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	5a 95       	dec	r21
 2de:	a9 f7       	brne	.-22     	; 0x2ca <__udivmodhi4_loop>
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	bc 01       	movw	r22, r24
 2e6:	cd 01       	movw	r24, r26
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
