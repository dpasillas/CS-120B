
LED_input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000930  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000443  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000150  00000000  00000000  00000df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00000f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000115  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	
	unsigned short i;
	unsigned short j;
	unsigned short time_to_off = 0;
	
	SFIOR = SFIOR | (1 << PUD); //Pull-up disable
  92:	80 b7       	in	r24, 0x30	; 48
  94:	84 60       	ori	r24, 0x04	; 4
  96:	80 bf       	out	0x30, r24	; 48
	DDRA = 0xFF; PORTA = 0x00;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xFF; PORTB = 0x00;
  9e:	87 bb       	out	0x17, r24	; 23
  a0:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xFF; PORTC = 0x00;
  a2:	84 bb       	out	0x14, r24	; 20
  a4:	15 ba       	out	0x15, r1	; 21
	DDRD = 0xFF; PORTD = 0x00; //LED Anodes low
  a6:	81 bb       	out	0x11, r24	; 17
  a8:	12 ba       	out	0x12, r1	; 18
	
	//init Analog-to-digital conversion
	ADMUX |= 1 << REFS0;
  aa:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); //enable, prescalar 64. 8,000,000 / 64 = 125,000
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	86 68       	ori	r24, 0x86	; 134
  b0:	86 b9       	out	0x06, r24	; 6
	
	//start
	while(1)
	{
		PORTD = 0;
		PORTC = ~0;
  b2:	1f ef       	ldi	r17, 0xFF	; 255
		PORTA = ~1;
  b4:	0e ef       	ldi	r16, 0xFE	; 254
		PORTD = 0x83; //light
  b6:	0f 2e       	mov	r0, r31
  b8:	f3 e8       	ldi	r31, 0x83	; 131
  ba:	df 2e       	mov	r13, r31
  bc:	f0 2d       	mov	r31, r0
		
		PORTD = 0x82; //reverse-bias
  be:	0f 2e       	mov	r0, r31
  c0:	f2 e8       	ldi	r31, 0x82	; 130
  c2:	cf 2e       	mov	r12, r31
  c4:	f0 2d       	mov	r31, r0
		
		ADCSRA|=(1<<ADIF); // clear by writing 1
		PORTD = 0;
		DDRA = 0xFF;
		j = 0;
		unsigned char tmp = 225 - ADC;
  c6:	0f 2e       	mov	r0, r31
  c8:	f1 ee       	ldi	r31, 0xE1	; 225
  ca:	bf 2e       	mov	r11, r31
  cc:	f0 2d       	mov	r31, r0
  ce:	ee 24       	eor	r14, r14
  d0:	ff 24       	eor	r15, r15
		for( i = 0; i < 10; ++i)
			j |= (tmp > 10*i) << i;
  d2:	a1 e0       	ldi	r26, 0x01	; 1
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	ce 2d       	mov	r28, r14
  d8:	df 2d       	mov	r29, r15
		PORTC = ~j;//~(0xFF >> (7 - (ADC >> 7)));//~ADC >> 2;
		PORTA = 0xFF;
		PORTD = 0x80;
  da:	0f 2e       	mov	r0, r31
  dc:	f0 e8       	ldi	r31, 0x80	; 128
  de:	af 2e       	mov	r10, r31
  e0:	f0 2d       	mov	r31, r0
	
	
	//start
	while(1)
	{
		PORTD = 0;
  e2:	12 ba       	out	0x12, r1	; 18
		PORTC = ~0;
  e4:	15 bb       	out	0x15, r17	; 21
		PORTA = ~1;
  e6:	0b bb       	out	0x1b, r16	; 27
		PORTD = 0x83; //light
  e8:	d2 ba       	out	0x12, r13	; 18
		
		PORTD = 0x82; //reverse-bias
  ea:	c2 ba       	out	0x12, r12	; 18
		PORTA = 0xFF;
  ec:	1b bb       	out	0x1b, r17	; 27
		
		//input
		DDRA = ~1;
  ee:	0a bb       	out	0x1a, r16	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	30 e7       	ldi	r19, 0x70	; 112
  f4:	42 e0       	ldi	r20, 0x02	; 2
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x64>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x6e>
 100:	00 00       	nop
		_delay_ms(100);
		
		ADCSRA |= 1 << ADSC; // start analog read
 102:	36 9a       	sbi	0x06, 6	; 6
		//224
		//141
		while(!(ADCSRA & (1<<ADIF))); //poll until ready
 104:	34 9b       	sbis	0x06, 4	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x72>
		
		ADCSRA|=(1<<ADIF); // clear by writing 1
 108:	34 9a       	sbi	0x06, 4	; 6
		PORTD = 0;
 10a:	12 ba       	out	0x12, r1	; 18
		DDRA = 0xFF;
 10c:	1a bb       	out	0x1a, r17	; 26
		j = 0;
		unsigned char tmp = 225 - ADC;
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	95 b1       	in	r25, 0x05	; 5
 112:	eb 2d       	mov	r30, r11
 114:	e8 1b       	sub	r30, r24
 116:	a7 01       	movw	r20, r14
		while(!(ADCSRA & (1<<ADIF))); //poll until ready
		
		ADCSRA|=(1<<ADIF); // clear by writing 1
		PORTD = 0;
		DDRA = 0xFF;
		j = 0;
 118:	b7 01       	movw	r22, r14
		unsigned char tmp = 225 - ADC;
		for( i = 0; i < 10; ++i)
 11a:	97 01       	movw	r18, r14
			j |= (tmp > 10*i) << i;
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	cd 01       	movw	r24, r26
 120:	4e 17       	cp	r20, r30
 122:	5f 07       	cpc	r21, r31
 124:	10 f0       	brcs	.+4      	; 0x12a <main+0x98>
 126:	8c 2f       	mov	r24, r28
 128:	9d 2f       	mov	r25, r29
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0xa0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <main+0x9c>
 136:	68 2b       	or	r22, r24
 138:	79 2b       	or	r23, r25
		ADCSRA|=(1<<ADIF); // clear by writing 1
		PORTD = 0;
		DDRA = 0xFF;
		j = 0;
		unsigned char tmp = 225 - ADC;
		for( i = 0; i < 10; ++i)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	46 5f       	subi	r20, 0xF6	; 246
 140:	5f 4f       	sbci	r21, 0xFF	; 255
 142:	2a 30       	cpi	r18, 0x0A	; 10
 144:	31 05       	cpc	r19, r1
 146:	59 f7       	brne	.-42     	; 0x11e <main+0x8c>
			j |= (tmp > 10*i) << i;
		PORTC = ~j;//~(0xFF >> (7 - (ADC >> 7)));//~ADC >> 2;
 148:	60 95       	com	r22
 14a:	65 bb       	out	0x15, r22	; 21
		PORTA = 0xFF;
 14c:	1b bb       	out	0x1b, r17	; 27
		PORTD = 0x80;
 14e:	a2 ba       	out	0x12, r10	; 18
 150:	8f ec       	ldi	r24, 0xCF	; 207
 152:	97 e0       	ldi	r25, 0x07	; 7
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0xc2>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xc8>
 15a:	00 00       	nop
		
		//for(i = 0; i < 1000; ++i)
			_delay_ms(1);
		PORTC = 0xFF;
 15c:	15 bb       	out	0x15, r17	; 21
		//time_to_off >>= 10;
		//for(i = 0; i < 0x0FFF; ++i)
		//PORTA = (i & time_to_off) == 0;
		//PORTA = 0;//time_to_off ==0;//(0x0FFF >> 9);
		//time_to_off = 0;
	}
 15e:	c1 cf       	rjmp	.-126    	; 0xe2 <main+0x50>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
